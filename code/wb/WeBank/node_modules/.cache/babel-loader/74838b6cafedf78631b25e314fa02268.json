{"remainingRequest":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js!E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":499162500000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\babel.config.js","mtime":1657619760000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/yho169/\\u5DE5\\u4F5C/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.array.fill\";\nimport _slicedToArray from \"E:/yho169/\\u5DE5\\u4F5C/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _toConsumableArray from \"E:/yho169/\\u5DE5\\u4F5C/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es6.array.map\";\nimport { uuid } from \"../../../util/index\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport CRender from '@jiaminghi/c-render';\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: function _default() {\n      return {};\n    }\n  },\n  data: function data() {\n    var id = uuid();\n    return {\n      gradientId: \"water-level-pond-\".concat(id),\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n      mergedConfig: {},\n      renderer: null,\n      svgBorderGradient: [],\n      details: '',\n      waves: [],\n      animation: false\n    };\n  },\n  computed: {\n    radius: function radius() {\n      var shape = this.mergedConfig.shape;\n      if (shape === 'round') return '50%';\n      if (shape === 'rect') return '0';\n      if (shape === 'roundRect') return '10px';\n      return '0';\n    },\n    shape: function shape() {\n      var shape = this.mergedConfig.shape;\n      if (!shape) return 'rect';\n      return shape;\n    }\n  },\n  watch: {\n    config: function config() {\n      var calcData = this.calcData,\n        renderer = this.renderer;\n      renderer.delAllGraph();\n      this.waves = [];\n      setTimeout(calcData, 0);\n    }\n  },\n  methods: {\n    init: function init() {\n      var initRender = this.initRender,\n        config = this.config,\n        calcData = this.calcData;\n      initRender();\n      if (!config) return;\n      calcData();\n    },\n    initRender: function initRender() {\n      var $refs = this.$refs;\n      this.renderer = new CRender($refs['water-pond-level']);\n    },\n    calcData: function calcData() {\n      var mergeConfig = this.mergeConfig,\n        calcSvgBorderGradient = this.calcSvgBorderGradient,\n        calcDetails = this.calcDetails;\n      mergeConfig();\n      calcSvgBorderGradient();\n      calcDetails();\n      var addWave = this.addWave,\n        animationWave = this.animationWave;\n      addWave();\n      animationWave();\n    },\n    mergeConfig: function mergeConfig() {\n      var config = this.config,\n        defaultConfig = this.defaultConfig;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config);\n    },\n    calcSvgBorderGradient: function calcSvgBorderGradient() {\n      var colors = this.mergedConfig.colors;\n      var colorNum = colors.length;\n      var colorOffsetGap = 100 / (colorNum - 1);\n      this.svgBorderGradient = colors.map(function (c, i) {\n        return [colorOffsetGap * i, c];\n      });\n    },\n    calcDetails: function calcDetails() {\n      var _this$mergedConfig = this.mergedConfig,\n        data = _this$mergedConfig.data,\n        formatter = _this$mergedConfig.formatter;\n      if (!data.length) {\n        this.details = '';\n        return;\n      }\n      var maxValue = Math.max.apply(Math, _toConsumableArray(data));\n      this.details = formatter.replace('{value}', maxValue);\n    },\n    addWave: function addWave() {\n      var renderer = this.renderer,\n        getWaveShapes = this.getWaveShapes,\n        getWaveStyle = this.getWaveStyle,\n        drawed = this.drawed;\n      var shapes = getWaveShapes();\n      var style = getWaveStyle();\n      this.waves = shapes.map(function (shape) {\n        return renderer.add({\n          name: 'smoothline',\n          animationFrame: 300,\n          shape: shape,\n          style: style,\n          drawed: drawed\n        });\n      });\n    },\n    getWaveShapes: function getWaveShapes() {\n      var mergedConfig = this.mergedConfig,\n        renderer = this.renderer,\n        mergeOffset = this.mergeOffset;\n      var waveNum = mergedConfig.waveNum,\n        waveHeight = mergedConfig.waveHeight,\n        data = mergedConfig.data;\n      var _renderer$area = _slicedToArray(renderer.area, 2),\n        w = _renderer$area[0],\n        h = _renderer$area[1];\n      var pointsNum = waveNum * 4 + 4;\n      var pointXGap = w / waveNum / 2;\n      return data.map(function (v) {\n        var points = new Array(pointsNum).fill(0).map(function (foo, j) {\n          var x = w - pointXGap * j;\n          var startY = (1 - v / 100) * h;\n          var y = j % 2 === 0 ? startY : startY - waveHeight;\n          return [x, y];\n        });\n        points = points.map(function (p) {\n          return mergeOffset(p, [pointXGap * 2, 0]);\n        });\n        return {\n          points: points\n        };\n      });\n    },\n    mergeOffset: function mergeOffset(_ref, _ref2) {\n      var _ref3 = _slicedToArray(_ref, 2),\n        x = _ref3[0],\n        y = _ref3[1];\n      var _ref4 = _slicedToArray(_ref2, 2),\n        ox = _ref4[0],\n        oy = _ref4[1];\n      return [x + ox, y + oy];\n    },\n    getWaveStyle: function getWaveStyle() {\n      var renderer = this.renderer,\n        mergedConfig = this.mergedConfig;\n      var h = renderer.area[1];\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      };\n    },\n    drawed: function drawed(_ref5, _ref6) {\n      var points = _ref5.shape.points;\n      var ctx = _ref6.ctx,\n        area = _ref6.area;\n      var firstPoint = points[0];\n      var lastPoint = points.slice(-1)[0];\n      var h = area[1];\n      ctx.lineTo(lastPoint[0], h);\n      ctx.lineTo(firstPoint[0], h);\n      ctx.closePath();\n      ctx.fill();\n    },\n    animationWave: function () {\n      var _animationWave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var repeat,\n          waves,\n          renderer,\n          animation,\n          w,\n          _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              repeat = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1;\n              waves = this.waves, renderer = this.renderer, animation = this.animation;\n              if (!animation) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 4:\n              this.animation = true;\n              w = renderer.area[0];\n              waves.forEach(function (graph) {\n                graph.attr('style', {\n                  translate: [0, 0]\n                });\n                graph.animation('style', {\n                  translate: [w, 0]\n                }, true);\n              });\n              _context.next = 9;\n              return renderer.launchAnimation();\n            case 9:\n              this.animation = false;\n              if (renderer.graphs.length) {\n                _context.next = 12;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 12:\n              this.animationWave(repeat + 1);\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function animationWave() {\n        return _animationWave.apply(this, arguments);\n      }\n      return animationWave;\n    }()\n  },\n  mounted: function mounted() {\n    var init = this.init;\n    init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    var renderer = this.renderer;\n    renderer.delAllGraph();\n    this.waves = [];\n  }\n};",{"version":3,"names":["uuid","deepMerge","deepClone","CRender","name","props","config","Object","default","_default","data","id","gradientId","concat","defaultConfig","shape","waveNum","waveHeight","waveOpacity","colors","formatter","mergedConfig","renderer","svgBorderGradient","details","waves","animation","computed","radius","watch","calcData","delAllGraph","setTimeout","methods","init","initRender","$refs","mergeConfig","calcSvgBorderGradient","calcDetails","addWave","animationWave","colorNum","length","colorOffsetGap","map","c","i","_this$mergedConfig","maxValue","Math","max","apply","_toConsumableArray","replace","getWaveShapes","getWaveStyle","drawed","shapes","style","add","animationFrame","mergeOffset","_renderer$area","_slicedToArray","area","w","h","pointsNum","pointXGap","v","points","Array","fill","foo","j","x","startY","y","p","_ref","_ref2","_ref3","_ref4","ox","oy","gradientColor","gradientType","gradientParams","gradientWith","opacity","translate","_ref5","_ref6","ctx","firstPoint","lastPoint","slice","lineTo","closePath","_animationWave","_asyncToGenerator","regeneratorRuntime","mark","_callee","repeat","_args","arguments","wrap","_callee$","_context","prev","next","undefined","abrupt","forEach","graph","attr","launchAnimation","graphs","stop","mounted","beforeDestroy"],"sources":["node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"],"mappings":"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"}]}