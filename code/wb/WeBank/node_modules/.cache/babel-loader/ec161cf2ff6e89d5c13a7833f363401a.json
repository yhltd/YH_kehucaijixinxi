{"remainingRequest":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration3\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration3\\src\\main.vue","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\babel.config.js","mtime":1657619760000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"E:/yho169/\\u7D20\\u6750/\\u89E3\\u538B\\u5305/wb/WeBank/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.array.map\";\nimport _slicedToArray from \"E:/yho169/\\u7D20\\u6750/\\u89E3\\u538B\\u5305/wb/WeBank/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport autoResize from \"../../../mixin/autoResize\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDecoration3',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    var pointSideLength = 7;\n    return {\n      ref: 'decoration-3',\n      svgWH: [300, 35],\n      svgScale: [1, 1],\n      rowNum: 2,\n      rowPoints: 25,\n      pointSideLength: pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n      points: [],\n      defaultColor: ['#7acaec', 'transparent'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color: function color() {\n      var mergeColor = this.mergeColor;\n      mergeColor();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var calcSVGData = this.calcSVGData;\n      calcSVGData();\n    },\n    calcSVGData: function calcSVGData() {\n      var calcPointsPosition = this.calcPointsPosition,\n        calcScale = this.calcScale;\n      calcPointsPosition();\n      calcScale();\n    },\n    calcPointsPosition: function calcPointsPosition() {\n      var svgWH = this.svgWH,\n        rowNum = this.rowNum,\n        rowPoints = this.rowPoints;\n      var _svgWH = _slicedToArray(svgWH, 2),\n        w = _svgWH[0],\n        h = _svgWH[1];\n      var horizontalGap = w / (rowPoints + 1);\n      var verticalGap = h / (rowNum + 1);\n      var points = new Array(rowNum).fill(0).map(function (foo, i) {\n        return new Array(rowPoints).fill(0).map(function (foo, j) {\n          return [horizontalGap * (j + 1), verticalGap * (i + 1)];\n        });\n      });\n      this.points = points.reduce(function (all, item) {\n        return [].concat(_toConsumableArray(all), _toConsumableArray(item));\n      }, []);\n    },\n    calcScale: function calcScale() {\n      var width = this.width,\n        height = this.height,\n        svgWH = this.svgWH;\n      var _svgWH2 = _slicedToArray(svgWH, 2),\n        w = _svgWH2[0],\n        h = _svgWH2[1];\n      this.svgScale = [width / w, height / h];\n    },\n    onResize: function onResize() {\n      var calcSVGData = this.calcSVGData;\n      calcSVGData();\n    },\n    mergeColor: function mergeColor() {\n      var color = this.color,\n        defaultColor = this.defaultColor;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    }\n  },\n  mounted: function mounted() {\n    var mergeColor = this.mergeColor;\n    mergeColor();\n  }\n};",{"version":3,"names":["autoResize","deepMerge","deepClone","name","mixins","props","color","type","Array","default","_default","data","pointSideLength","ref","svgWH","svgScale","rowNum","rowPoints","halfPointSideLength","points","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcSVGData","calcPointsPosition","calcScale","_svgWH","_slicedToArray","w","h","horizontalGap","verticalGap","fill","map","foo","i","j","reduce","all","item","concat","_toConsumableArray","width","height","_svgWH2","onResize","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/decoration3/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-3\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n\n      <template\n        v-for=\"(point, i) in points\"\n      >\n        <rect\n          :key=\"i\"\n          :fill=\"mergedColor[0]\"\n          :x=\"point[0] - halfPointSideLength\"\n          :y=\"point[1] - halfPointSideLength\"\n          :width=\"pointSideLength\"\n          :height=\"pointSideLength\"\n        >\n          <animate\n            v-if=\"Math.random() > 0.6\"\n            attributeName=\"fill\"\n            :values=\"`${mergedColor.join(';')}`\"\n            :dur=\"Math.random() + 1 + 's'\"\n            :begin=\"Math.random() * 2\"\n            repeatCount=\"indefinite\"\n          />\n        </rect>\n      </template>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration3',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    const pointSideLength = 7\n\n    return {\n      ref: 'decoration-3',\n\n      svgWH: [300, 35],\n\n      svgScale: [1, 1],\n\n      rowNum: 2,\n      rowPoints: 25,\n\n      pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n\n      points: [],\n\n      defaultColor: ['#7acaec', 'transparent'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { calcPointsPosition, calcScale } = this\n\n      calcPointsPosition()\n\n      calcScale()\n    },\n    calcPointsPosition () {\n      const { svgWH, rowNum, rowPoints } = this\n\n      const [w, h] = svgWH\n\n      const horizontalGap = w / (rowPoints + 1)\n      const verticalGap = h / (rowNum + 1)\n\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\n        new Array(rowPoints).fill(0).map((foo, j) => [\n          horizontalGap * (j + 1), verticalGap * (i + 1)\n        ]))\n\n      this.points = points.reduce((all, item) => [...all, ...item], [])\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"],"mappings":";;;;;AA8BA,OAAAA,UAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAJ,UAAA;EACAK,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA,IAAAC,eAAA;IAEA;MACAC,GAAA;MAEAC,KAAA;MAEAC,QAAA;MAEAC,MAAA;MACAC,SAAA;MAEAL,eAAA,EAAAA,eAAA;MACAM,mBAAA,EAAAN,eAAA;MAEAO,MAAA;MAEAC,YAAA;MAEAC,WAAA;IACA;EACA;EACAC,KAAA;IACAhB,KAAA,WAAAA,MAAA;MACA,IAAAiB,UAAA,QAAAA,UAAA;MAEAA,UAAA;IACA;EACA;EACAC,OAAA;IACAC,wBAAA,WAAAA,yBAAA;MACA,IAAAC,WAAA,QAAAA,WAAA;MAEAA,WAAA;IACA;IACAA,WAAA,WAAAA,YAAA;MACA,IAAAC,kBAAA,QAAAA,kBAAA;QAAAC,SAAA,QAAAA,SAAA;MAEAD,kBAAA;MAEAC,SAAA;IACA;IACAD,kBAAA,WAAAA,mBAAA;MACA,IAAAb,KAAA,QAAAA,KAAA;QAAAE,MAAA,QAAAA,MAAA;QAAAC,SAAA,QAAAA,SAAA;MAEA,IAAAY,MAAA,GAAAC,cAAA,CAAAhB,KAAA;QAAAiB,CAAA,GAAAF,MAAA;QAAAG,CAAA,GAAAH,MAAA;MAEA,IAAAI,aAAA,GAAAF,CAAA,IAAAd,SAAA;MACA,IAAAiB,WAAA,GAAAF,CAAA,IAAAhB,MAAA;MAEA,IAAAG,MAAA,OAAAX,KAAA,CAAAQ,MAAA,EAAAmB,IAAA,IAAAC,GAAA,WAAAC,GAAA,EAAAC,CAAA;QAAA,OACA,IAAA9B,KAAA,CAAAS,SAAA,EAAAkB,IAAA,IAAAC,GAAA,WAAAC,GAAA,EAAAE,CAAA;UAAA,QACAN,aAAA,IAAAM,CAAA,OAAAL,WAAA,IAAAI,CAAA,MACA;QAAA;MAAA;MAEA,KAAAnB,MAAA,GAAAA,MAAA,CAAAqB,MAAA,WAAAC,GAAA,EAAAC,IAAA;QAAA,UAAAC,MAAA,CAAAC,kBAAA,CAAAH,GAAA,GAAAG,kBAAA,CAAAF,IAAA;MAAA;IACA;IACAd,SAAA,WAAAA,UAAA;MACA,IAAAiB,KAAA,QAAAA,KAAA;QAAAC,MAAA,QAAAA,MAAA;QAAAhC,KAAA,QAAAA,KAAA;MAEA,IAAAiC,OAAA,GAAAjB,cAAA,CAAAhB,KAAA;QAAAiB,CAAA,GAAAgB,OAAA;QAAAf,CAAA,GAAAe,OAAA;MAEA,KAAAhC,QAAA,IAAA8B,KAAA,GAAAd,CAAA,EAAAe,MAAA,GAAAd,CAAA;IACA;IACAgB,QAAA,WAAAA,SAAA;MACA,IAAAtB,WAAA,QAAAA,WAAA;MAEAA,WAAA;IACA;IACAH,UAAA,WAAAA,WAAA;MACA,IAAAjB,KAAA,QAAAA,KAAA;QAAAc,YAAA,QAAAA,YAAA;MAEA,KAAAC,WAAA,GAAApB,SAAA,CAAAC,SAAA,CAAAkB,YAAA,SAAAd,KAAA;IACA;EACA;EACA2C,OAAA,WAAAA,QAAA;IACA,IAAA1B,UAAA,QAAAA,UAAA;IAEAA,UAAA;EACA;AACA"}]}