{"remainingRequest":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\babel.config.js","mtime":1657619760000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/yho169/\\u7D20\\u6750/\\u89E3\\u538B\\u5305/wb/WeBank/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.sort\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport autoResize from \"../../../mixin/autoResize\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvConicalColumnChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      ref: 'conical-column-chart',\n      defaultConfig: {\n        /**\n         * @description Chart data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Chart img\n         * @type {Array<String>}\n         * @default img = []\n         */\n        img: [],\n        /**\n         * @description Chart font size\n         * @type {Number}\n         * @default fontSize = 12\n         */\n        fontSize: 12,\n        /**\n         * @description Img side length\n         * @type {Number}\n         * @default imgSideLength = 30\n         */\n        imgSideLength: 30,\n        /**\n         * @description Column color\n         * @type {String}\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\n         */\n        columnColor: 'rgba(0, 194, 255, 0.4)',\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Show value\n         * @type {Boolean}\n         * @default showValue = false\n         */\n        showValue: false\n      },\n      mergedConfig: null,\n      column: []\n    };\n  },\n  watch: {\n    config: function config() {\n      var calcData = this.calcData;\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var calcData = this.calcData;\n      calcData();\n    },\n    onResize: function onResize() {\n      var calcData = this.calcData;\n      calcData();\n    },\n    calcData: function calcData() {\n      var mergeConfig = this.mergeConfig,\n        initData = this.initData,\n        calcSVGPath = this.calcSVGPath;\n      mergeConfig();\n      initData();\n      calcSVGPath();\n    },\n    mergeConfig: function mergeConfig() {\n      var defaultConfig = this.defaultConfig,\n        config = this.config;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    initData: function initData() {\n      var mergedConfig = this.mergedConfig;\n      var data = mergedConfig.data;\n      data = deepClone(data, true);\n      data.sort(function (_ref, _ref2) {\n        var a = _ref.value;\n        var b = _ref2.value;\n        if (a > b) return -1;\n        if (a < b) return 1;\n        if (a === b) return 0;\n      });\n      var max = data[0] ? data[0].value : 10;\n      data = data.map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          percent: item.value / max\n        });\n      });\n      mergedConfig.data = data;\n    },\n    calcSVGPath: function calcSVGPath() {\n      var mergedConfig = this.mergedConfig,\n        width = this.width,\n        height = this.height;\n      var imgSideLength = mergedConfig.imgSideLength,\n        fontSize = mergedConfig.fontSize,\n        data = mergedConfig.data;\n      var itemNum = data.length;\n      var gap = width / (itemNum + 1);\n      var useAbleHeight = height - imgSideLength - fontSize - 5;\n      var svgBottom = height - fontSize - 5;\n      this.column = data.map(function (item, i) {\n        var percent = item.percent;\n        var middleXPos = gap * (i + 1);\n        var leftXPos = gap * i;\n        var rightXpos = gap * (i + 2);\n        var middleYPos = svgBottom - useAbleHeight * percent;\n        var controlYPos = useAbleHeight * percent * 0.6 + middleYPos;\n        var d = \"\\n          M\".concat(leftXPos, \", \").concat(svgBottom, \"\\n          Q\").concat(middleXPos, \", \").concat(controlYPos, \" \").concat(middleXPos, \",\").concat(middleYPos, \"\\n          M\").concat(middleXPos, \",\").concat(middleYPos, \"\\n          Q\").concat(middleXPos, \", \").concat(controlYPos, \" \").concat(rightXpos, \",\").concat(svgBottom, \"\\n          L\").concat(leftXPos, \", \").concat(svgBottom, \"\\n          Z\\n        \");\n        var textY = (svgBottom + middleYPos) / 2 + fontSize / 2;\n        return _objectSpread(_objectSpread({}, item), {}, {\n          d: d,\n          x: middleXPos,\n          y: middleYPos,\n          textY: textY\n        });\n      });\n    }\n  }\n};",{"version":3,"names":["autoResize","deepMerge","deepClone","name","mixins","props","config","type","Object","default","_default","data","ref","defaultConfig","img","fontSize","imgSideLength","columnColor","textColor","showValue","mergedConfig","column","watch","calcData","methods","afterAutoResizeMixinInit","onResize","mergeConfig","initData","calcSVGPath","sort","_ref","_ref2","a","value","b","max","map","item","_objectSpread","percent","width","height","itemNum","length","gap","useAbleHeight","svgBottom","i","middleXPos","leftXPos","rightXpos","middleYPos","controlYPos","d","concat","textY","x","y"],"sources":["node_modules/@jiaminghi/data-view/lib/components/conicalColumnChart/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-conical-column-chart\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <g\n        v-for=\"(item, i) in column\"\n        :key=\"i\"\n      >\n        <path\n          :d=\"item.d\"\n          :fill=\"mergedConfig.columnColor\"\n        />\n        <text\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"height - 4\"\n        >\n          {{ item.name }}\n        </text>\n        <image\n          v-if=\"mergedConfig.img.length\"\n          :xlink:href=\"mergedConfig.img[i % mergedConfig.img.length]\"\n          :width=\"mergedConfig.imgSideLength\"\n          :height=\"mergedConfig.imgSideLength\"\n          :x=\"item.x - mergedConfig.imgSideLength / 2\"\n          :y=\"item.y - mergedConfig.imgSideLength\"\n        />\n        <text\n          v-if=\"mergedConfig.showValue\"\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\n          :fill=\"mergedConfig.textColor\"\n          :x=\"item.x\"\n          :y=\"item.textY\"\n        >\n          {{ item.value }}\n        </text>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvConicalColumnChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'conical-column-chart',\n\n      defaultConfig: {\n        /**\n         * @description Chart data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Chart img\n         * @type {Array<String>}\n         * @default img = []\n         */\n        img: [],\n        /**\n         * @description Chart font size\n         * @type {Number}\n         * @default fontSize = 12\n         */\n        fontSize: 12,\n        /**\n         * @description Img side length\n         * @type {Number}\n         * @default imgSideLength = 30\n         */\n        imgSideLength: 30,\n        /**\n         * @description Column color\n         * @type {String}\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\n         */\n        columnColor: 'rgba(0, 194, 255, 0.4)',\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Show value\n         * @type {Boolean}\n         * @default showValue = false\n         */\n        showValue: false\n      },\n\n      mergedConfig: null,\n\n      column: []\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    calcData () {\n      const { mergeConfig, initData, calcSVGPath } = this\n\n      mergeConfig()\n\n      initData()\n\n      calcSVGPath()\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    initData () {\n      const { mergedConfig } = this\n      let { data } = mergedConfig\n\n      data = deepClone(data, true)\n\n      data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const max = data[0] ? data[0].value : 10\n\n      data = data.map(item => ({\n        ...item,\n        percent: item.value / max\n      }))\n\n      mergedConfig.data = data\n    },\n    calcSVGPath () {\n      const { mergedConfig, width, height } = this\n\n      const { imgSideLength, fontSize, data } = mergedConfig\n\n      const itemNum = data.length\n      const gap = width / (itemNum + 1)\n\n      const useAbleHeight = height - imgSideLength - fontSize - 5\n      const svgBottom = height - fontSize - 5\n\n      this.column = data.map((item, i) => {\n        const { percent } = item\n\n        const middleXPos = gap * (i + 1)\n        const leftXPos = gap * i\n        const rightXpos = gap * (i + 2)\n\n        const middleYPos = svgBottom - useAbleHeight * percent\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos\n\n        const d = `\n          M${leftXPos}, ${svgBottom}\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\n          M${middleXPos},${middleYPos}\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\n          L${leftXPos}, ${svgBottom}\n          Z\n        `\n\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2\n\n        return {\n          ...item,\n          d,\n          x: middleXPos,\n          y: middleYPos,\n          textY\n        }\n      })\n    }\n  }\n}\n</script>"],"mappings":"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"}]}