{"remainingRequest":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\flylineChartEnhanced\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\flylineChartEnhanced\\src\\main.vue","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\babel.config.js","mtime":1657619760000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\素材\\解压包\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/yho169/\\u7D20\\u6750/\\u89E3\\u538B\\u5305/wb/WeBank/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _toConsumableArray from \"E:/yho169/\\u7D20\\u6750/\\u89E3\\u538B\\u5305/wb/WeBank/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"E:/yho169/\\u7D20\\u6750/\\u89E3\\u538B\\u5305/wb/WeBank/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es6.array.map\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/yho169/\\u7D20\\u6750/\\u89E3\\u538B\\u5305/wb/WeBank/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nimport { randomExtend, getPointDistance, uuid } from \"../../../util/index\";\nimport autoResize from \"../../../mixin/autoResize\";\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    var id = uuid();\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: \"flyline-gradient-id-\".concat(id),\n      haloGradientId: \"halo-gradient-id-\".concat(id),\n      /**\n       * @description Type Declaration\n       * \n       * interface Halo {\n       *    show?: boolean\n       *    duration?: [number, number]\n       *    color?: string\n       *    radius?: number\n       * }\n       * \n       * interface Text {\n       *    show?: boolean\n       *    offset?: [number, number]\n       *    color?: string\n       *    fontSize?: number\n       * }\n       * \n       * interface Icon {\n       *    show?: boolean\n       *    src?: string\n       *    width?: number\n       *    height?: number\n       * }\n       * \n       * interface Point {\n       *    name: string\n       *    coordinate: [number, number]\n       *    halo?: Halo\n       *    text?: Text\n       *    icon?: Icon\n       * }\n       * \n       * interface Line {\n       *    width?: number\n       *    color?: string\n       *    orbitColor?: string\n       *    duration?: [number, number]\n       *    radius?: string\n       * }\n       * \n       * interface Flyline extends Line {\n       *    source: string\n       *    target: string\n       * }\n       * \n       * interface FlylineWithPath extends Flyline {\n       *    d: string\n       *    path: [[number, number], [number, number], [number, number]]\n       *    key: string\n       * }\n       */\n      defaultConfig: {\n        /**\n         * @description Flyline chart points\n         * @type {Point[]}\n         * @default points = []\n         */\n        points: [],\n        /**\n         * @description Lines\n         * @type {Flyline[]}\n         * @default lines = []\n         */\n        lines: [],\n        /**\n         * @description Global halo configuration\n         * @type {Halo}\n         */\n        halo: {\n          /**\n           * @description Whether to show halo\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Halo animation duration (1s = 10)\n           * @type {[number, number]}\n           */\n          duration: [20, 30],\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Global text configuration\n         * @type {Text}\n         */\n        text: {\n          /**\n           * @description Whether to show text\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Text offset\n           * @type {[number, number]}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Global icon configuration\n         * @type {Icon}\n         */\n        icon: {\n          /**\n           * @description Whether to show icon\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Icon src\n           * @type {String}\n           * @default src = ''\n           */\n          src: '',\n          /**\n           * @description Icon width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Icon height\n           * @type {Number}\n           * @default width = 15\n           */\n          height: 15\n        },\n        /**\n         * @description Global line configuration\n         * @type {Line}\n         */\n        line: {\n          /**\n           * @description Line width\n           * @type {Number}\n           * @default width = 1\n           */\n          width: 1,\n          /**\n           * @description Flyline color\n           * @type {String}\n           * @default color = '#ffde93'\n           */\n          color: '#ffde93',\n          /**\n           * @description Orbit color\n           * @type {String}\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\n           * @description Flyline animation duration\n           * @type {[number, number]}\n           * @default duration = [20, 30]\n           */\n          duration: [20, 30],\n          /**\n           * @description Flyline radius\n           * @type {Number}\n           * @default radius = 100\n           */\n          radius: 100\n        },\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgSrc = ''\n         */\n        bgImgSrc: '',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true\n      },\n      /**\n       * @description Fly line data\n       * @type {FlylineWithPath[]}\n       * @default flylines = []\n       */\n      flylines: [],\n      /**\n       * @description Fly line lengths\n       * @type {Number[]}\n       * @default flylineLengths = []\n       */\n      flylineLengths: [],\n      /**\n       * @description Fly line points\n       * @default flylinePoints = []\n       */\n      flylinePoints: [],\n      mergedConfig: null\n    };\n  },\n  watch: {\n    config: function config() {\n      var calcData = this.calcData;\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var calcData = this.calcData;\n      calcData();\n    },\n    onResize: function onResize() {\n      var calcData = this.calcData;\n      calcData();\n    },\n    calcData: function () {\n      var _calcData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var mergeConfig, calcflylinePoints, calcLinePaths, calcLineLengths;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              mergeConfig = this.mergeConfig, calcflylinePoints = this.calcflylinePoints, calcLinePaths = this.calcLinePaths;\n              mergeConfig();\n              calcflylinePoints();\n              calcLinePaths();\n              calcLineLengths = this.calcLineLengths;\n              _context.next = 7;\n              return calcLineLengths();\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function calcData() {\n        return _calcData.apply(this, arguments);\n      }\n      return calcData;\n    }(),\n    mergeConfig: function mergeConfig() {\n      var config = this.config,\n        defaultConfig = this.defaultConfig;\n      var mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n      var points = mergedConfig.points,\n        lines = mergedConfig.lines,\n        halo = mergedConfig.halo,\n        text = mergedConfig.text,\n        icon = mergedConfig.icon,\n        line = mergedConfig.line;\n      mergedConfig.points = points.map(function (item) {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {});\n        item.text = deepMerge(deepClone(text, true), item.text || {});\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {});\n        return item;\n      });\n      mergedConfig.lines = lines.map(function (item) {\n        return deepMerge(deepClone(line, true), item);\n      });\n      this.mergedConfig = mergedConfig;\n    },\n    calcflylinePoints: function calcflylinePoints() {\n      var mergedConfig = this.mergedConfig,\n        width = this.width,\n        height = this.height;\n      var relative = mergedConfig.relative,\n        points = mergedConfig.points;\n      this.flylinePoints = points.map(function (item, i) {\n        var _item$coordinate = _slicedToArray(item.coordinate, 2),\n          x = _item$coordinate[0],\n          y = _item$coordinate[1],\n          halo = item.halo,\n          icon = item.icon,\n          text = item.text;\n        if (relative) item.coordinate = [x * width, y * height];\n        item.halo.time = randomExtend.apply(void 0, _toConsumableArray(halo.duration)) / 10;\n        var iw = icon.width,\n          ih = icon.height;\n        item.icon.x = item.coordinate[0] - iw / 2;\n        item.icon.y = item.coordinate[1] - ih / 2;\n        var _text$offset = _slicedToArray(text.offset, 2),\n          ox = _text$offset[0],\n          oy = _text$offset[1];\n        item.text.x = item.coordinate[0] + ox;\n        item.text.y = item.coordinate[1] + oy;\n        item.key = \"\".concat(item.coordinate.toString()).concat(i);\n        return item;\n      });\n    },\n    calcLinePaths: function calcLinePaths() {\n      var getPath = this.getPath,\n        mergedConfig = this.mergedConfig;\n      var points = mergedConfig.points,\n        lines = mergedConfig.lines;\n      this.flylines = lines.map(function (item) {\n        var source = item.source,\n          target = item.target,\n          duration = item.duration;\n        var sourcePoint = points.find(function (_ref) {\n          var name = _ref.name;\n          return name === source;\n        }).coordinate;\n        var targetPoint = points.find(function (_ref2) {\n          var name = _ref2.name;\n          return name === target;\n        }).coordinate;\n        var path = getPath(sourcePoint, targetPoint).map(function (item) {\n          return item.map(function (v) {\n            return parseFloat(v.toFixed(10));\n          });\n        });\n        var d = \"M\".concat(path[0].toString(), \" Q\").concat(path[1].toString(), \" \").concat(path[2].toString());\n        var key = \"path\".concat(path.toString());\n        var time = randomExtend.apply(void 0, _toConsumableArray(duration)) / 10;\n        return _objectSpread(_objectSpread({}, item), {}, {\n          path: path,\n          key: key,\n          d: d,\n          time: time\n        });\n      });\n    },\n    getPath: function getPath(start, end) {\n      var getControlPoint = this.getControlPoint;\n      var controlPoint = getControlPoint(start, end);\n      return [start, controlPoint, end];\n    },\n    getControlPoint: function getControlPoint(_ref3, _ref4) {\n      var _ref5 = _slicedToArray(_ref3, 2),\n        sx = _ref5[0],\n        sy = _ref5[1];\n      var _ref6 = _slicedToArray(_ref4, 2),\n        ex = _ref6[0],\n        ey = _ref6[1];\n      var getKLinePointByx = this.getKLinePointByx,\n        mergedConfig = this.mergedConfig;\n      var curvature = mergedConfig.curvature,\n        k = mergedConfig.k;\n      var mx = (sx + ex) / 2,\n        my = (sy + ey) / 2;\n      var distance = getPointDistance([sx, sy], [ex, ey]);\n      var targetLength = distance / curvature;\n      var disDived = targetLength / 2;\n      var dx = mx,\n        dy = my;\n      do {\n        dx += disDived;\n        dy = getKLinePointByx(k, [mx, my], dx)[1];\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength);\n      return [dx, dy];\n    },\n    getKLinePointByx: function getKLinePointByx(k, _ref7, x) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n        lx = _ref8[0],\n        ly = _ref8[1];\n      var y = ly - k * lx + k * x;\n      return [x, y];\n    },\n    calcLineLengths: function () {\n      var _calcLineLengths = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var $nextTick, flylines, $refs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              $nextTick = this.$nextTick, flylines = this.flylines, $refs = this.$refs;\n              _context2.next = 3;\n              return $nextTick();\n            case 3:\n              this.flylineLengths = flylines.map(function (_ref9) {\n                var key = _ref9.key;\n                return $refs[key][0].getTotalLength();\n              });\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function calcLineLengths() {\n        return _calcLineLengths.apply(this, arguments);\n      }\n      return calcLineLengths;\n    }(),\n    consoleClickPos: function consoleClickPos(_ref10) {\n      var offsetX = _ref10.offsetX,\n        offsetY = _ref10.offsetY;\n      var width = this.width,\n        height = this.height,\n        dev = this.dev;\n      if (!dev) return;\n      var relativeX = (offsetX / width).toFixed(2);\n      var relativeY = (offsetY / height).toFixed(2);\n      console.warn(\"dv-flyline-chart-enhanced DEV: \\n Click Position is [\".concat(offsetX, \", \").concat(offsetY, \"] \\n Relative Position is [\").concat(relativeX, \", \").concat(relativeY, \"]\"));\n    }\n  }\n};",{"version":3,"names":["deepMerge","deepClone","randomExtend","getPointDistance","uuid","autoResize","name","mixins","props","config","type","Object","default","_default","dev","Boolean","data","id","ref","unique","Math","random","flylineGradientId","concat","haloGradientId","defaultConfig","points","lines","halo","show","duration","color","radius","text","offset","fontSize","icon","src","width","height","line","orbitColor","bgImgSrc","k","curvature","relative","flylines","flylineLengths","flylinePoints","mergedConfig","watch","calcData","methods","afterAutoResizeMixinInit","onResize","_calcData","_asyncToGenerator","regeneratorRuntime","mark","_callee","mergeConfig","calcflylinePoints","calcLinePaths","calcLineLengths","wrap","_callee$","_context","prev","next","stop","apply","arguments","map","item","i","_item$coordinate","_slicedToArray","coordinate","x","y","time","_toConsumableArray","iw","ih","_text$offset","ox","oy","key","toString","getPath","source","target","sourcePoint","find","_ref","targetPoint","_ref2","path","v","parseFloat","toFixed","d","_objectSpread","start","end","getControlPoint","controlPoint","_ref3","_ref4","_ref5","sx","sy","_ref6","ex","ey","getKLinePointByx","mx","my","distance","targetLength","disDived","dx","dy","_ref7","_ref8","lx","ly","_calcLineLengths","_callee2","$nextTick","$refs","_callee2$","_context2","_ref9","getTotalLength","consoleClickPos","_ref10","offsetX","offsetY","relativeX","relativeY","console","warn"],"sources":["node_modules/@jiaminghi/data-view/lib/components/flylineChartEnhanced/src/main.vue"],"sourcesContent":["<template>\n  <div\n    class=\"dv-flyline-chart-enhanced\"\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgSrc : ''})`\"\n    :ref=\"ref\"\n    @click=\"consoleClickPos\"\n  >\n    <svg v-if=\"flylines.length\" :width=\"width\" :height=\"height\">\n      <defs>\n        <radialGradient\n          :id=\"flylineGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n        </radialGradient>\n\n        <radialGradient\n          :id=\"haloGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n        </radialGradient>\n      </defs>\n\n      <!-- points -->\n      <g v-for=\"point in flylinePoints\" :key=\"point.key + Math.random()\">\n        <defs>\n          <circle\n            v-if=\"point.halo.show\"\n            :id=\"`halo${unique}${point.key}`\"\n            :cx=\"point.coordinate[0]\"\n            :cy=\"point.coordinate[1]\"\n          >\n            <animate\n              attributeName=\"r\"\n              :values=\"`1;${point.halo.radius}`\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n            <animate\n              attributeName=\"opacity\"\n              values=\"1;0\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </defs>\n\n        <!-- halo gradient mask -->\n        <mask :id=\"`mask${unique}${point.key}`\">\n          <use\n            v-if=\"point.halo.show\"\n            :xlink:href=\"`#halo${unique}${point.key}`\"\n            :fill=\"`url(#${haloGradientId})`\"\n          />\n        </mask>\n\n        <!-- point halo -->\n        <use\n          v-if=\"point.halo.show\"\n          :xlink:href=\"`#halo${unique}${point.key}`\"\n          :fill=\"point.halo.color\"\n          :mask=\"`url(#mask${unique}${point.key})`\"\n        />\n\n        <!-- point icon -->\n        <image\n          v-if=\"point.icon.show\"\n          :xlink:href=\"point.icon.src\"\n          :width=\"point.icon.width\"\n          :height=\"point.icon.height\"\n          :x=\"point.icon.x\"\n          :y=\"point.icon.y\"\n        />\n\n        <!-- point text -->\n        <text\n          v-if=\"point.text.show\"\n          :style=\"`fontSize:${point.text.fontSize}px;color:${point.text.color}`\"\n          :fill=\"point.text.color\"\n          :x=\"point.text.x\"\n          :y=\"point.text.y\"\n        >\n          {{ point.name }}\n        </text>\n      </g>\n\n      <!-- flylines -->\n      <g v-for=\"(line, i) in flylines\" :key=\"line.key + Math.random()\">\n        <defs>\n          <path\n            :id=\"line.key\"\n            :ref=\"line.key\"\n            :d=\"line.d\"\n            fill=\"transparent\"\n          />\n        </defs>\n\n        <!-- orbit line -->\n        <use\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.orbitColor\"\n        />\n\n        <!-- fly line gradient mask -->\n        <mask :id=\"`mask${unique}${line.key}`\">\n          <circle cx=\"0\" cy=\"0\" :r=\"line.radius\" :fill=\"`url(#${flylineGradientId})`\">\n            <animateMotion\n              :dur=\"line.time\"\n              :path=\"line.d\"\n              rotate=\"auto\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </mask>\n\n        <!-- fly line -->\n        <use\n          v-if=\"flylineLengths[i]\"\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.color\"\n          :mask=\"`url(#mask${unique}${line.key})`\"\n        >\n          <animate\n            attributeName=\"stroke-dasharray\"\n            :from=\"`0, ${flylineLengths[i]}`\"\n            :to=\"`${flylineLengths[i]}, 0`\"\n            :dur=\"line.time\"\n            repeatCount=\"indefinite\"\n          />\n        </use>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: `flyline-gradient-id-${id}`,\n      haloGradientId: `halo-gradient-id-${id}`,\n      /**\n       * @description Type Declaration\n       * \n       * interface Halo {\n       *    show?: boolean\n       *    duration?: [number, number]\n       *    color?: string\n       *    radius?: number\n       * }\n       * \n       * interface Text {\n       *    show?: boolean\n       *    offset?: [number, number]\n       *    color?: string\n       *    fontSize?: number\n       * }\n       * \n       * interface Icon {\n       *    show?: boolean\n       *    src?: string\n       *    width?: number\n       *    height?: number\n       * }\n       * \n       * interface Point {\n       *    name: string\n       *    coordinate: [number, number]\n       *    halo?: Halo\n       *    text?: Text\n       *    icon?: Icon\n       * }\n       * \n       * interface Line {\n       *    width?: number\n       *    color?: string\n       *    orbitColor?: string\n       *    duration?: [number, number]\n       *    radius?: string\n       * }\n       * \n       * interface Flyline extends Line {\n       *    source: string\n       *    target: string\n       * }\n       * \n       * interface FlylineWithPath extends Flyline {\n       *    d: string\n       *    path: [[number, number], [number, number], [number, number]]\n       *    key: string\n       * }\n       */\n      defaultConfig: {\n        /**\n         * @description Flyline chart points\n         * @type {Point[]}\n         * @default points = []\n         */\n        points: [],\n        /**\n         * @description Lines\n         * @type {Flyline[]}\n         * @default lines = []\n         */\n        lines: [],\n        /**\n         * @description Global halo configuration\n         * @type {Halo}\n         */\n        halo: {\n          /**\n           * @description Whether to show halo\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Halo animation duration (1s = 10)\n           * @type {[number, number]}\n           */\n          duration: [20, 30],\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Global text configuration\n         * @type {Text}\n         */\n        text: {\n          /**\n           * @description Whether to show text\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Text offset\n           * @type {[number, number]}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Global icon configuration\n         * @type {Icon}\n         */\n        icon: {\n          /**\n           * @description Whether to show icon\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Icon src\n           * @type {String}\n           * @default src = ''\n           */\n          src: '',\n          /**\n           * @description Icon width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Icon height\n           * @type {Number}\n           * @default width = 15\n           */\n          height: 15\n        },\n        /**\n         * @description Global line configuration\n         * @type {Line}\n         */\n        line: {\n          /**\n           * @description Line width\n           * @type {Number}\n           * @default width = 1\n           */\n          width: 1,\n          /**\n           * @description Flyline color\n           * @type {String}\n           * @default color = '#ffde93'\n           */\n          color: '#ffde93',\n          /**\n           * @description Orbit color\n           * @type {String}\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\n           * @description Flyline animation duration\n           * @type {[number, number]}\n           * @default duration = [20, 30]\n           */\n          duration: [20, 30],\n          /**\n           * @description Flyline radius\n           * @type {Number}\n           * @default radius = 100\n           */\n          radius: 100\n        },\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgSrc = ''\n         */\n        bgImgSrc: '',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true\n      },\n      /**\n       * @description Fly line data\n       * @type {FlylineWithPath[]}\n       * @default flylines = []\n       */\n      flylines: [],\n      /**\n       * @description Fly line lengths\n       * @type {Number[]}\n       * @default flylineLengths = []\n       */\n      flylineLengths: [],\n      /**\n       * @description Fly line points\n       * @default flylinePoints = []\n       */\n      flylinePoints: [],\n\n      mergedConfig: null\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    async calcData () {\n      const { mergeConfig, calcflylinePoints, calcLinePaths } = this\n\n      mergeConfig()\n\n      calcflylinePoints()\n\n      calcLinePaths()\n\n      const { calcLineLengths } = this\n\n      await calcLineLengths()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n      const { points, lines, halo, text, icon, line } = mergedConfig\n\n      mergedConfig.points = points.map(item => {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {})\n        item.text = deepMerge(deepClone(text, true), item.text || {})\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {})\n\n        return item\n      })\n\n      mergedConfig.lines = lines.map(item => {\n        return deepMerge(deepClone(line, true), item)\n      })\n\n      this.mergedConfig = mergedConfig\n    },\n    calcflylinePoints () {\n      const { mergedConfig, width, height } = this\n\n      const { relative, points } = mergedConfig\n\n      this.flylinePoints = points.map((item, i) => {\n        const { coordinate: [x, y], halo, icon, text } = item\n\n        if (relative) item.coordinate = [x * width, y * height]\n\n        item.halo.time = randomExtend(...halo.duration) / 10\n\n        const { width: iw, height: ih } = icon\n        item.icon.x = item.coordinate[0] - iw / 2\n        item.icon.y = item.coordinate[1] - ih / 2\n\n        const [ox, oy] = text.offset\n        item.text.x = item.coordinate[0] + ox\n        item.text.y = item.coordinate[1] + oy\n\n        item.key = `${item.coordinate.toString()}${i}`\n\n        return item\n      })\n    },\n    calcLinePaths () {\n      const { getPath, mergedConfig } = this\n\n      const { points, lines } = mergedConfig\n\n      this.flylines = lines.map(item => {\n        const { source, target, duration } = item\n\n        const sourcePoint = points.find(({ name }) => name === source).coordinate\n        const targetPoint = points.find(({ name }) => name === target).coordinate\n\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))))\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\n        const key = `path${path.toString()}`\n        const time = randomExtend(...duration) / 10\n\n        return { ...item, path, key, d, time }\n      })\n    },\n    getPath (start, end) {\n      const { getControlPoint } = this\n\n      const controlPoint = getControlPoint(start, end)\n\n      return [start, controlPoint, end]\n    },\n    getControlPoint ([sx, sy], [ex, ey]) {\n      const { getKLinePointByx, mergedConfig } = this\n\n      const { curvature, k } = mergedConfig\n\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\n\n      const distance = getPointDistance([sx, sy], [ex, ey])\n\n      const targetLength = distance / curvature\n      const disDived = targetLength / 2\n\n      let [dx, dy] = [mx, my]\n\n      do {\n        dx += disDived\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\n\n      return [dx, dy]\n    },\n    getKLinePointByx (k, [lx, ly], x) {\n      const y = ly - k * lx + k * x\n\n      return [x, y]\n    },\n    async calcLineLengths () {\n      const { $nextTick, flylines, $refs } = this\n\n      await $nextTick()\n\n      this.flylineLengths = flylines.map(({ key }) => $refs[key][0].getTotalLength())\n    },\n    consoleClickPos ({ offsetX, offsetY }) {\n      const { width, height, dev } = this\n\n      if (!dev) return\n\n      const relativeX = (offsetX / width).toFixed(2)\n      const relativeY = (offsetY / height).toFixed(2)\n\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\n    }\n  }\n}\n</script>"],"mappings":";;;;;;;;;;;;;;;;;;;AAyJA,SAAAA,SAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,YAAA,EAAAC,gBAAA,EAAAC,IAAA;AAEA,OAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAF,UAAA;EACAG,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACAC,GAAA;MACAJ,IAAA,EAAAK,OAAA;MACAH,OAAA;IACA;EACA;EACAI,IAAA,WAAAA,KAAA;IACA,IAAAC,EAAA,GAAAb,IAAA;IACA;MACAc,GAAA;MACAC,MAAA,EAAAC,IAAA,CAAAC,MAAA;MACAC,iBAAA,yBAAAC,MAAA,CAAAN,EAAA;MACAO,cAAA,sBAAAD,MAAA,CAAAN,EAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACAQ,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,MAAA;QACA;AACA;AACA;AACA;AACA;QACAC,KAAA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAC,IAAA;UACA;AACA;AACA;AACA;UACAC,QAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAJ,IAAA;UACA;AACA;AACA;AACA;AACA;UACAK,MAAA;UACA;AACA;AACA;AACA;AACA;UACAH,KAAA;UACA;AACA;AACA;AACA;AACA;UACAI,QAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAP,IAAA;UACA;AACA;AACA;AACA;AACA;UACAQ,GAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAF,KAAA;UACA;AACA;AACA;AACA;AACA;UACAP,KAAA;UACA;AACA;AACA;AACA;AACA;UACAU,UAAA;UACA;AACA;AACA;AACA;AACA;UACAX,QAAA;UACA;AACA;AACA;AACA;AACA;UACAE,MAAA;QACA;QACA;AACA;AACA;AACA;AACA;QACAU,QAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,CAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;QACA;AACA;AACA;AACA;AACA;QACAC,QAAA;MACA;MACA;AACA;AACA;AACA;AACA;MACAC,QAAA;MACA;AACA;AACA;AACA;AACA;MACAC,cAAA;MACA;AACA;AACA;AACA;MACAC,aAAA;MAEAC,YAAA;IACA;EACA;EACAC,KAAA;IACAzC,MAAA,WAAAA,OAAA;MACA,IAAA0C,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;EACA;EACAC,OAAA;IACAC,wBAAA,WAAAA,yBAAA;MACA,IAAAF,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;IACAG,QAAA,WAAAA,SAAA;MACA,IAAAH,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;IACAA,QAAA;MAAA,IAAAI,SAAA,GAAAC,iBAAA,eAAAC,kBAAA,CAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,WAAA,EAAAC,iBAAA,EAAAC,aAAA,EAAAC,eAAA;QAAA,OAAAN,kBAAA,CAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACAR,WAAA,QAAAA,WAAA,EAAAC,iBAAA,QAAAA,iBAAA,EAAAC,aAAA,QAAAA,aAAA;cAEAF,WAAA;cAEAC,iBAAA;cAEAC,aAAA;cAEAC,eAAA,QAAAA,eAAA;cAAAG,QAAA,CA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"}]}