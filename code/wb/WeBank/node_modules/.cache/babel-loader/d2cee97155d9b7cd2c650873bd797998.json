{"remainingRequest":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration6\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration6\\src\\main.vue","mtime":1681782973618},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\babel.config.js","mtime":1681782968933},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1681782976971},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1681783170949}],"contextDependencies":[],"result":["import _toConsumableArray from \"E:/\\u5DE5\\u4F5C(\\u6797)/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es6.array.reduce\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.array.map\";\nimport _slicedToArray from \"E:/\\u5DE5\\u4F5C(\\u6797)/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport autoResize from \"../../../mixin/autoResize\";\nimport { randomExtend } from \"../../../util\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDecoration6',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    var rectWidth = 7;\n    return {\n      ref: 'decoration-6',\n      svgWH: [300, 35],\n      svgScale: [1, 1],\n      rowNum: 1,\n      rowPoints: 40,\n      rectWidth: rectWidth,\n      halfRectWidth: rectWidth / 2,\n      points: [],\n      heights: [],\n      minHeights: [],\n      randoms: [],\n      defaultColor: ['#7acaec', '#7acaec'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color: function color() {\n      var mergeColor = this.mergeColor;\n      mergeColor();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var calcSVGData = this.calcSVGData;\n      calcSVGData();\n    },\n    calcSVGData: function calcSVGData() {\n      var calcPointsPosition = this.calcPointsPosition,\n        calcScale = this.calcScale;\n      calcPointsPosition();\n      calcScale();\n    },\n    calcPointsPosition: function calcPointsPosition() {\n      var svgWH = this.svgWH,\n        rowNum = this.rowNum,\n        rowPoints = this.rowPoints;\n      var _svgWH = _slicedToArray(svgWH, 2),\n        w = _svgWH[0],\n        h = _svgWH[1];\n      var horizontalGap = w / (rowPoints + 1);\n      var verticalGap = h / (rowNum + 1);\n      var points = new Array(rowNum).fill(0).map(function (foo, i) {\n        return new Array(rowPoints).fill(0).map(function (foo, j) {\n          return [horizontalGap * (j + 1), verticalGap * (i + 1)];\n        });\n      });\n      this.points = points.reduce(function (all, item) {\n        return [].concat(_toConsumableArray(all), _toConsumableArray(item));\n      }, []);\n      var heights = this.heights = new Array(rowNum * rowPoints).fill(0).map(function (foo) {\n        return Math.random() > 0.8 ? randomExtend(0.7 * h, h) : randomExtend(0.2 * h, 0.5 * h);\n      });\n      this.minHeights = new Array(rowNum * rowPoints).fill(0).map(function (foo, i) {\n        return heights[i] * Math.random();\n      });\n      this.randoms = new Array(rowNum * rowPoints).fill(0).map(function (foo) {\n        return Math.random() + 1.5;\n      });\n    },\n    calcScale: function calcScale() {\n      var width = this.width,\n        height = this.height,\n        svgWH = this.svgWH;\n      var _svgWH2 = _slicedToArray(svgWH, 2),\n        w = _svgWH2[0],\n        h = _svgWH2[1];\n      this.svgScale = [width / w, height / h];\n    },\n    onResize: function onResize() {\n      var calcSVGData = this.calcSVGData;\n      calcSVGData();\n    },\n    mergeColor: function mergeColor() {\n      var color = this.color,\n        defaultColor = this.defaultColor;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    }\n  },\n  mounted: function mounted() {\n    var mergeColor = this.mergeColor;\n    mergeColor();\n  }\n};",{"version":3,"names":["autoResize","randomExtend","deepMerge","deepClone","name","mixins","props","color","type","Array","default","_default","data","rectWidth","ref","svgWH","svgScale","rowNum","rowPoints","halfRectWidth","points","heights","minHeights","randoms","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcSVGData","calcPointsPosition","calcScale","_svgWH","_slicedToArray","w","h","horizontalGap","verticalGap","fill","map","foo","i","j","reduce","all","item","concat","_toConsumableArray","Math","random","width","height","_svgWH2","onResize","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/decoration6/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-decoration-6\" :ref=\"ref\">\r\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\r\n      <template\r\n        v-for=\"(point, i) in points\"\r\n      >\r\n        <rect\r\n          :key=\"i\"\r\n          :fill=\"mergedColor[Math.random() > 0.5 ? 0 : 1]\"\r\n          :x=\"point[0] - halfRectWidth\"\r\n          :y=\"point[1] - heights[i] / 2\"\r\n          :width=\"rectWidth\"\r\n          :height=\"heights[i]\"\r\n        >\r\n          <animate\r\n            attributeName=\"y\"\r\n            :values=\"`${point[1] - minHeights[i] / 2};${point[1] - heights[i] / 2};${point[1] - minHeights[i] / 2}`\"\r\n            :dur=\"`${randoms[i]}s`\"\r\n            keyTimes=\"0;0.5;1\"\r\n            calcMode=\"spline\"\r\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\r\n            begin=\"0s\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n          <animate\r\n            attributeName=\"height\"\r\n            :values=\"`${minHeights[i]};${heights[i]};${minHeights[i]}`\"\r\n            :dur=\"`${randoms[i]}s`\"\r\n            keyTimes=\"0;0.5;1\"\r\n            calcMode=\"spline\"\r\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\r\n            begin=\"0s\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </rect>\r\n      </template>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { randomExtend } from '../../../util'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvDecoration6',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    }\r\n  },\r\n  data () {\r\n    const rectWidth = 7\r\n\r\n    return {\r\n      ref: 'decoration-6',\r\n\r\n      svgWH: [300, 35],\r\n\r\n      svgScale: [1, 1],\r\n\r\n      rowNum: 1,\r\n      rowPoints: 40,\r\n\r\n      rectWidth,\r\n      halfRectWidth: rectWidth / 2,\r\n\r\n      points: [],\r\n      heights: [],\r\n      minHeights: [],\r\n      randoms: [],\r\n\r\n      defaultColor: ['#7acaec', '#7acaec'],\r\n\r\n      mergedColor: []\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    calcSVGData () {\r\n      const { calcPointsPosition, calcScale } = this\r\n\r\n      calcPointsPosition()\r\n\r\n      calcScale()\r\n    },\r\n    calcPointsPosition () {\r\n      const { svgWH, rowNum, rowPoints } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      const horizontalGap = w / (rowPoints + 1)\r\n      const verticalGap = h / (rowNum + 1)\r\n\r\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\r\n        new Array(rowPoints).fill(0).map((foo, j) => [\r\n          horizontalGap * (j + 1), verticalGap * (i + 1)\r\n        ]))\r\n\r\n      this.points = points.reduce((all, item) => [...all, ...item], [])\r\n      const heights = this.heights = new Array(rowNum * rowPoints)\r\n        .fill(0).map(foo =>\r\n          Math.random() > 0.8 ? randomExtend(0.7 * h, h) : randomExtend(0.2 * h, 0.5 * h))\r\n\r\n      this.minHeights = new Array(rowNum * rowPoints)\r\n        .fill(0).map((foo, i) => heights[i] * Math.random())\r\n\r\n      this.randoms = new Array(rowNum * rowPoints)\r\n        .fill(0).map(foo => Math.random() + 1.5)\r\n    },\r\n    calcScale () {\r\n      const { width, height, svgWH } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      this.svgScale = [width / w, height / h]\r\n    },\r\n    onResize () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    }\r\n  },\r\n  mounted () {\r\n    const { mergeColor } = this\r\n\r\n    mergeColor()\r\n  }\r\n}\r\n</script>"],"mappings":";;;;;AAyCA,OAAAA,UAAA;AAEA,SAAAC,YAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAL,UAAA;EACAM,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA,IAAAC,SAAA;IAEA;MACAC,GAAA;MAEAC,KAAA;MAEAC,QAAA;MAEAC,MAAA;MACAC,SAAA;MAEAL,SAAA,EAAAA,SAAA;MACAM,aAAA,EAAAN,SAAA;MAEAO,MAAA;MACAC,OAAA;MACAC,UAAA;MACAC,OAAA;MAEAC,YAAA;MAEAC,WAAA;IACA;EACA;EACAC,KAAA;IACAnB,KAAA,WAAAA,MAAA;MACA,IAAAoB,UAAA,QAAAA,UAAA;MAEAA,UAAA;IACA;EACA;EACAC,OAAA;IACAC,wBAAA,WAAAA,yBAAA;MACA,IAAAC,WAAA,QAAAA,WAAA;MAEAA,WAAA;IACA;IACAA,WAAA,WAAAA,YAAA;MACA,IAAAC,kBAAA,QAAAA,kBAAA;QAAAC,SAAA,QAAAA,SAAA;MAEAD,kBAAA;MAEAC,SAAA;IACA;IACAD,kBAAA,WAAAA,mBAAA;MACA,IAAAhB,KAAA,QAAAA,KAAA;QAAAE,MAAA,QAAAA,MAAA;QAAAC,SAAA,QAAAA,SAAA;MAEA,IAAAe,MAAA,GAAAC,cAAA,CAAAnB,KAAA;QAAAoB,CAAA,GAAAF,MAAA;QAAAG,CAAA,GAAAH,MAAA;MAEA,IAAAI,aAAA,GAAAF,CAAA,IAAAjB,SAAA;MACA,IAAAoB,WAAA,GAAAF,CAAA,IAAAnB,MAAA;MAEA,IAAAG,MAAA,OAAAX,KAAA,CAAAQ,MAAA,EAAAsB,IAAA,IAAAC,GAAA,WAAAC,GAAA,EAAAC,CAAA;QAAA,OACA,IAAAjC,KAAA,CAAAS,SAAA,EAAAqB,IAAA,IAAAC,GAAA,WAAAC,GAAA,EAAAE,CAAA;UAAA,QACAN,aAAA,IAAAM,CAAA,OAAAL,WAAA,IAAAI,CAAA,MACA;QAAA;MAAA;MAEA,KAAAtB,MAAA,GAAAA,MAAA,CAAAwB,MAAA,WAAAC,GAAA,EAAAC,IAAA;QAAA,UAAAC,MAAA,CAAAC,kBAAA,CAAAH,GAAA,GAAAG,kBAAA,CAAAF,IAAA;MAAA;MACA,IAAAzB,OAAA,QAAAA,OAAA,OAAAZ,KAAA,CAAAQ,MAAA,GAAAC,SAAA,EACAqB,IAAA,IAAAC,GAAA,WAAAC,GAAA;QAAA,OACAQ,IAAA,CAAAC,MAAA,WAAAjD,YAAA,OAAAmC,CAAA,EAAAA,CAAA,IAAAnC,YAAA,OAAAmC,CAAA,QAAAA,CAAA;MAAA;MAEA,KAAAd,UAAA,OAAAb,KAAA,CAAAQ,MAAA,GAAAC,SAAA,EACAqB,IAAA,IAAAC,GAAA,WAAAC,GAAA,EAAAC,CAAA;QAAA,OAAArB,OAAA,CAAAqB,CAAA,IAAAO,IAAA,CAAAC,MAAA;MAAA;MAEA,KAAA3B,OAAA,OAAAd,KAAA,CAAAQ,MAAA,GAAAC,SAAA,EACAqB,IAAA,IAAAC,GAAA,WAAAC,GAAA;QAAA,OAAAQ,IAAA,CAAAC,MAAA;MAAA;IACA;IACAlB,SAAA,WAAAA,UAAA;MACA,IAAAmB,KAAA,QAAAA,KAAA;QAAAC,MAAA,QAAAA,MAAA;QAAArC,KAAA,QAAAA,KAAA;MAEA,IAAAsC,OAAA,GAAAnB,cAAA,CAAAnB,KAAA;QAAAoB,CAAA,GAAAkB,OAAA;QAAAjB,CAAA,GAAAiB,OAAA;MAEA,KAAArC,QAAA,IAAAmC,KAAA,GAAAhB,CAAA,EAAAiB,MAAA,GAAAhB,CAAA;IACA;IACAkB,QAAA,WAAAA,SAAA;MACA,IAAAxB,WAAA,QAAAA,WAAA;MAEAA,WAAA;IACA;IACAH,UAAA,WAAAA,WAAA;MACA,IAAApB,KAAA,QAAAA,KAAA;QAAAiB,YAAA,QAAAA,YAAA;MAEA,KAAAC,WAAA,GAAAvB,SAAA,CAAAC,SAAA,CAAAqB,YAAA,SAAAjB,KAAA;IACA;EACA;EACAgD,OAAA,WAAAA,QAAA;IACA,IAAA5B,UAAA,QAAAA,UAAA;IAEAA,UAAA;EACA;AACA"}]}