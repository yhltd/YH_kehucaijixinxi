{"remainingRequest":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js!E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue","mtime":499162500000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\babel.config.js","mtime":1657619760000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\yho169\\工作\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/yho169/\\u5DE5\\u4F5C/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.map\";\nimport { uuid } from \"../../../util/index\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    var id = uuid();\n    return {\n      gradientId1: \"percent-pond-gradientId1-\".concat(id),\n      gradientId2: \"percent-pond-gradientId2-\".concat(id),\n      width: 0,\n      height: 0,\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n      mergedConfig: null\n    };\n  },\n  computed: {\n    rectWidth: function rectWidth() {\n      var mergedConfig = this.mergedConfig,\n        width = this.width;\n      if (!mergedConfig) return 0;\n      var borderWidth = mergedConfig.borderWidth;\n      return width - borderWidth;\n    },\n    rectHeight: function rectHeight() {\n      var mergedConfig = this.mergedConfig,\n        height = this.height;\n      if (!mergedConfig) return 0;\n      var borderWidth = mergedConfig.borderWidth;\n      return height - borderWidth;\n    },\n    points: function points() {\n      var mergedConfig = this.mergedConfig,\n        width = this.width,\n        height = this.height;\n      var halfHeight = height / 2;\n      if (!mergedConfig) return \"0, \".concat(halfHeight, \" 0, \").concat(halfHeight);\n      var borderWidth = mergedConfig.borderWidth,\n        borderGap = mergedConfig.borderGap,\n        value = mergedConfig.value;\n      var polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value;\n      return \"\\n        \".concat(borderWidth + borderGap, \", \").concat(halfHeight, \"\\n        \").concat(borderWidth + borderGap + polylineLength, \", \").concat(halfHeight + 0.001, \"\\n      \");\n    },\n    polylineWidth: function polylineWidth() {\n      var mergedConfig = this.mergedConfig,\n        height = this.height;\n      if (!mergedConfig) return 0;\n      var borderWidth = mergedConfig.borderWidth,\n        borderGap = mergedConfig.borderGap;\n      return height - (borderWidth + borderGap) * 2;\n    },\n    linearGradient: function linearGradient() {\n      var mergedConfig = this.mergedConfig;\n      if (!mergedConfig) return [];\n      var colors = mergedConfig.colors;\n      var colorNum = colors.length;\n      var colorOffsetGap = 100 / (colorNum - 1);\n      return colors.map(function (c, i) {\n        return [colorOffsetGap * i, c];\n      });\n    },\n    polylineGradient: function polylineGradient() {\n      var gradientId1 = this.gradientId1,\n        gradientId2 = this.gradientId2,\n        mergedConfig = this.mergedConfig;\n      if (!mergedConfig) return gradientId2;\n      if (mergedConfig.localGradient) return gradientId1;\n      return gradientId2;\n    },\n    gradient2XPos: function gradient2XPos() {\n      var mergedConfig = this.mergedConfig;\n      if (!mergedConfig) return '100%';\n      var value = mergedConfig.value;\n      return \"\".concat(200 - value, \"%\");\n    },\n    details: function details() {\n      var mergedConfig = this.mergedConfig;\n      if (!mergedConfig) return '';\n      var value = mergedConfig.value,\n        formatter = mergedConfig.formatter;\n      return formatter.replace('{value}', value);\n    }\n  },\n  watch: {\n    config: function config() {\n      var mergeConfig = this.mergeConfig;\n      mergeConfig();\n    }\n  },\n  methods: {\n    init: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var initWH, config, mergeConfig;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              initWH = this.initWH, config = this.config, mergeConfig = this.mergeConfig;\n              _context.next = 3;\n              return initWH();\n            case 3:\n              if (config) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 5:\n              mergeConfig();\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function init() {\n        return _init.apply(this, arguments);\n      }\n      return init;\n    }(),\n    initWH: function () {\n      var _initWH = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var $nextTick, $refs, _$refs$percentPond, clientWidth, clientHeight;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              $nextTick = this.$nextTick, $refs = this.$refs;\n              _context2.next = 3;\n              return $nextTick();\n            case 3:\n              _$refs$percentPond = $refs['percent-pond'], clientWidth = _$refs$percentPond.clientWidth, clientHeight = _$refs$percentPond.clientHeight;\n              this.width = clientWidth;\n              this.height = clientHeight;\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function initWH() {\n        return _initWH.apply(this, arguments);\n      }\n      return initWH;\n    }(),\n    mergeConfig: function mergeConfig() {\n      var config = this.config,\n        defaultConfig = this.defaultConfig;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    }\n  },\n  mounted: function mounted() {\n    var init = this.init;\n    init();\n  }\n};",{"version":3,"names":["uuid","deepMerge","deepClone","name","props","config","type","Object","default","_default","data","id","gradientId1","concat","gradientId2","width","height","defaultConfig","value","colors","borderWidth","borderGap","lineDash","textColor","borderRadius","localGradient","formatter","mergedConfig","computed","rectWidth","rectHeight","points","halfHeight","polylineLength","polylineWidth","linearGradient","colorNum","length","colorOffsetGap","map","c","i","polylineGradient","gradient2XPos","details","replace","watch","mergeConfig","methods","init","_init","_asyncToGenerator","regeneratorRuntime","mark","_callee","initWH","wrap","_callee$","_context","prev","next","abrupt","stop","apply","arguments","_initWH","_callee2","$nextTick","$refs","_$refs$percentPond","clientWidth","clientHeight","_callee2$","_context2","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"],"mappings":"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"}]}