{"remainingRequest":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue","mtime":1681782973660},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\babel.config.js","mtime":1681782968933},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1681782976971},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1681783170949}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/\\u5DE5\\u4F5C(\\u6797)/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.array.fill\";\nimport _defineProperty from \"E:/\\u5DE5\\u4F5C(\\u6797)/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"E:/\\u5DE5\\u4F5C(\\u6797)/YH_kehucaijixinxi/code/wb/WeBank/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.sort\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport autoResize from \"../../../mixin/autoResize\";\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      ref: 'scroll-ranking-board',\n      defaultConfig: {\n        /**\r\n         * @description Board data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         */\n        data: [],\n        /**\r\n         * @description Row num\r\n         * @type {Number}\r\n         * @default rowNum = 5\r\n         */\n        rowNum: 5,\n        /**\r\n         * @description Scroll wait time\r\n         * @type {Number}\r\n         * @default waitTime = 2000\r\n         */\n        waitTime: 2000,\n        /**\r\n         * @description Carousel type\r\n         * @type {String}\r\n         * @default carousel = 'single'\r\n         * @example carousel = 'single' | 'page'\r\n         */\n        carousel: 'single',\n        /**\r\n         * @description Value unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         * @example unit = 'ton'\r\n         */\n        unit: '',\n        /**\r\n         * @description Auto sort by value\r\n         * @type {Boolean}\r\n         * @default sort = true\r\n         */\n        sort: true,\n        /**\r\n         * @description Value formatter\r\n         * @type {Function}\r\n         * @default valueFormatter = null\r\n         */\n        valueFormatter: null\n      },\n      mergedConfig: null,\n      rowsData: [],\n      rows: [],\n      heights: [],\n      animationIndex: 0,\n      animationHandler: '',\n      updater: 0\n    };\n  },\n  watch: {\n    config: function config() {\n      var stopAnimation = this.stopAnimation,\n        calcData = this.calcData;\n      stopAnimation();\n      calcData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit: function afterAutoResizeMixinInit() {\n      var calcData = this.calcData;\n      calcData();\n    },\n    onResize: function onResize() {\n      var mergedConfig = this.mergedConfig,\n        calcHeights = this.calcHeights;\n      if (!mergedConfig) return;\n      calcHeights(true);\n    },\n    calcData: function calcData() {\n      var mergeConfig = this.mergeConfig,\n        calcRowsData = this.calcRowsData;\n      mergeConfig();\n      calcRowsData();\n      var calcHeights = this.calcHeights;\n      calcHeights();\n      var animation = this.animation;\n      animation(true);\n    },\n    mergeConfig: function mergeConfig() {\n      var config = this.config,\n        defaultConfig = this.defaultConfig;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcRowsData: function calcRowsData() {\n      var _this$mergedConfig = this.mergedConfig,\n        data = _this$mergedConfig.data,\n        rowNum = _this$mergedConfig.rowNum,\n        sort = _this$mergedConfig.sort;\n      sort && data.sort(function (_ref, _ref2) {\n        var a = _ref.value;\n        var b = _ref2.value;\n        if (a > b) return -1;\n        if (a < b) return 1;\n        if (a === b) return 0;\n      });\n      var value = data.map(function (_ref3) {\n        var value = _ref3.value;\n        return value;\n      });\n      var min = Math.min.apply(Math, _toConsumableArray(value)) || 0;\n\n      // abs of min\n      var minAbs = Math.abs(min);\n      var max = Math.max.apply(Math, _toConsumableArray(value)) || 0;\n\n      // abs of max\n      var maxAbs = Math.abs(max);\n      var total = max + minAbs;\n      data = data.map(function (row, i) {\n        return _objectSpread(_objectSpread({}, row), {}, {\n          ranking: i + 1,\n          percent: (row.value + minAbs) / total * 100\n        });\n      });\n      var rowLength = data.length;\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [].concat(_toConsumableArray(data), _toConsumableArray(data));\n      }\n      data = data.map(function (d, i) {\n        return _objectSpread(_objectSpread({}, d), {}, {\n          scroll: i\n        });\n      });\n      this.rowsData = data;\n      this.rows = data;\n    },\n    calcHeights: function calcHeights() {\n      var onresize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var height = this.height,\n        mergedConfig = this.mergedConfig;\n      var rowNum = mergedConfig.rowNum,\n        data = mergedConfig.data;\n      var avgHeight = height / rowNum;\n      this.avgHeight = avgHeight;\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight);\n    },\n    animation: function () {\n      var _animation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this$heights;\n        var start,\n          avgHeight,\n          animationIndex,\n          mergedConfig,\n          rowsData,\n          animation,\n          updater,\n          waitTime,\n          carousel,\n          rowNum,\n          rowLength,\n          animationNum,\n          rows,\n          back,\n          _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              start = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n              avgHeight = this.avgHeight, animationIndex = this.animationIndex, mergedConfig = this.mergedConfig, rowsData = this.rowsData, animation = this.animation, updater = this.updater;\n              waitTime = mergedConfig.waitTime, carousel = mergedConfig.carousel, rowNum = mergedConfig.rowNum;\n              rowLength = rowsData.length;\n              if (!(rowNum >= rowLength)) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 6:\n              if (!start) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 9;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, waitTime);\n              });\n            case 9:\n              if (!(updater !== this.updater)) {\n                _context.next = 11;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 11:\n              animationNum = carousel === 'single' ? 1 : rowNum;\n              rows = rowsData.slice(animationIndex);\n              rows.push.apply(rows, _toConsumableArray(rowsData.slice(0, animationIndex)));\n              this.rows = rows.slice(0, rowNum + 1);\n              this.heights = new Array(rowLength).fill(avgHeight);\n              _context.next = 18;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 300);\n              });\n            case 18:\n              if (!(updater !== this.updater)) {\n                _context.next = 20;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 20:\n              (_this$heights = this.heights).splice.apply(_this$heights, [0, animationNum].concat(_toConsumableArray(new Array(animationNum).fill(0))));\n              animationIndex += animationNum;\n              back = animationIndex - rowLength;\n              if (back >= 0) animationIndex = back;\n              this.animationIndex = animationIndex;\n              this.animationHandler = setTimeout(animation, waitTime - 300);\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function animation() {\n        return _animation.apply(this, arguments);\n      }\n      return animation;\n    }(),\n    stopAnimation: function stopAnimation() {\n      var animationHandler = this.animationHandler,\n        updater = this.updater;\n      this.updater = (updater + 1) % 999999;\n      if (!animationHandler) return;\n      clearTimeout(animationHandler);\n    }\n  },\n  destroyed: function destroyed() {\n    var stopAnimation = this.stopAnimation;\n    stopAnimation();\n  }\n};",{"version":3,"names":["autoResize","deepMerge","deepClone","name","mixins","props","config","type","Object","default","_default","data","ref","defaultConfig","rowNum","waitTime","carousel","unit","sort","valueFormatter","mergedConfig","rowsData","rows","heights","animationIndex","animationHandler","updater","watch","stopAnimation","calcData","methods","afterAutoResizeMixinInit","onResize","calcHeights","mergeConfig","calcRowsData","animation","_this$mergedConfig","_ref","_ref2","a","value","b","map","_ref3","min","Math","apply","_toConsumableArray","minAbs","abs","max","maxAbs","total","row","i","_objectSpread","ranking","percent","rowLength","length","concat","d","scroll","onresize","arguments","undefined","height","avgHeight","Array","fill","_animation","_asyncToGenerator","regeneratorRuntime","mark","_callee","_this$heights","start","animationNum","back","_args","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","setTimeout","slice","push","splice","stop","clearTimeout","destroyed"],"sources":["node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src/main.vue"],"sourcesContent":["<template>\r\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\r\n    <div\r\n      class=\"row-item\"\r\n      v-for=\"(item, i) in rows\"\r\n      :key=\"item.toString() + item.scroll\"\r\n      :style=\"`height: ${heights[i]}px;`\"\r\n    >\r\n      <div class=\"ranking-info\">\r\n        <div class=\"rank\">No.{{ item.ranking }}</div>\r\n        <div class=\"info-name\" v-html=\"item.name\" />\r\n        <div class=\"ranking-value\">{{ mergedConfig.valueFormatter ? mergedConfig.valueFormatter(item) : item.value + mergedConfig.unit }}</div>\r\n      </div>\r\n\r\n      <div class=\"ranking-column\">\r\n        <div\r\n          class=\"inside-column\"\r\n          :style=\"`width: ${item.percent}%;`\"\r\n        >\r\n          <div class=\"shine\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvScrollRankingBoard',\r\n  mixins: [autoResize],\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      ref: 'scroll-ranking-board',\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Board data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Row num\r\n         * @type {Number}\r\n         * @default rowNum = 5\r\n         */\r\n        rowNum: 5,\r\n        /**\r\n         * @description Scroll wait time\r\n         * @type {Number}\r\n         * @default waitTime = 2000\r\n         */\r\n        waitTime: 2000,\r\n        /**\r\n         * @description Carousel type\r\n         * @type {String}\r\n         * @default carousel = 'single'\r\n         * @example carousel = 'single' | 'page'\r\n         */\r\n        carousel: 'single',\r\n        /**\r\n         * @description Value unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         * @example unit = 'ton'\r\n         */\r\n        unit: '',\r\n        /**\r\n         * @description Auto sort by value\r\n         * @type {Boolean}\r\n         * @default sort = true\r\n         */\r\n        sort: true,\r\n        /**\r\n         * @description Value formatter\r\n         * @type {Function}\r\n         * @default valueFormatter = null\r\n         */\r\n        valueFormatter: null\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      rowsData: [],\r\n\r\n      rows: [],\r\n\r\n      heights: [],\r\n\r\n      animationIndex: 0,\r\n\r\n      animationHandler: '',\r\n\r\n      updater: 0\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { stopAnimation, calcData } = this\r\n\r\n      stopAnimation()\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    onResize () {\r\n      const { mergedConfig, calcHeights } = this\r\n\r\n      if (!mergedConfig) return\r\n\r\n      calcHeights(true)\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, calcRowsData } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcRowsData()\r\n\r\n      const { calcHeights } = this\r\n\r\n      calcHeights()\r\n\r\n      const { animation } = this\r\n\r\n      animation(true)\r\n    },\r\n    mergeConfig () {\r\n      let { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    },\r\n    calcRowsData () {\r\n      let { data, rowNum, sort } = this.mergedConfig\r\n\r\n      sort && data.sort(({ value: a }, { value: b }) => {\r\n        if (a > b) return -1\r\n        if (a < b) return 1\r\n        if (a === b) return 0\r\n      })\r\n\r\n      const value = data.map(({ value }) => value)\r\n      \r\n      const min = Math.min(...value) || 0\r\n\r\n      // abs of min\r\n      const minAbs = Math.abs(min)\r\n\r\n      const max = Math.max(...value) || 0\r\n\r\n      // abs of max\r\n      const maxAbs = Math.abs(max)\r\n\r\n      const total = max + minAbs\r\n\r\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: (row.value + minAbs) / total * 100 }))\r\n\r\n      const rowLength = data.length\r\n\r\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\r\n        data = [...data, ...data]\r\n      }\r\n\r\n      data = data.map((d, i) => ({ ...d, scroll: i }))\r\n\r\n      this.rowsData = data\r\n      this.rows = data\r\n    },\r\n    calcHeights (onresize = false) {\r\n      const { height, mergedConfig } = this\r\n\r\n      const { rowNum, data } = mergedConfig\r\n\r\n      const avgHeight = height / rowNum\r\n\r\n      this.avgHeight = avgHeight\r\n\r\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\r\n    },\r\n    async animation (start = false) {\r\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\r\n\r\n      const { waitTime, carousel, rowNum } = mergedConfig\r\n\r\n      const rowLength = rowsData.length\r\n\r\n      if (rowNum >= rowLength) return\r\n\r\n      if (start) {\r\n        await new Promise(resolve => setTimeout(resolve, waitTime))\r\n        if (updater !== this.updater) return\r\n      }\r\n\r\n      const animationNum = carousel === 'single' ? 1 : rowNum\r\n\r\n      let rows = rowsData.slice(animationIndex)\r\n      rows.push(...rowsData.slice(0, animationIndex))\r\n\r\n      this.rows = rows.slice(0, rowNum + 1)\r\n      this.heights = new Array(rowLength).fill(avgHeight)\r\n\r\n      await new Promise(resolve => setTimeout(resolve, 300))\r\n      if (updater !== this.updater) return\r\n\r\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\r\n\r\n      animationIndex += animationNum\r\n\r\n      const back = animationIndex - rowLength\r\n      if (back >= 0) animationIndex = back\r\n\r\n      this.animationIndex = animationIndex\r\n      this.animationHandler = setTimeout(animation, waitTime - 300)\r\n    },\r\n    stopAnimation () {\r\n      const { animationHandler, updater } = this\r\n\r\n      this.updater = (updater + 1) % 999999\r\n\r\n      if (!animationHandler) return\r\n\r\n      clearTimeout(animationHandler)\r\n    },\r\n  },\r\n  destroyed () {\r\n    const { stopAnimation } = this\r\n\r\n    stopAnimation()\r\n  }\r\n}\r\n</script>"],"mappings":"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"}]}