{"remainingRequest":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\capsuleChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\capsuleChart\\src\\main.vue","mtime":1681782973577},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1681782976971},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1681783170949}],"contextDependencies":[],"result":["\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvCapsuleChart',\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultConfig: {\r\n        /**\r\n         * @description Capsule chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\r\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: [\r\n          '#37a2da',\r\n          '#32c5e9',\r\n          '#67e0e3',\r\n          '#9fe6b8',\r\n          '#ffdb5c',\r\n          '#ff9f7f',\r\n          '#fb7293'\r\n        ],\r\n        /**\r\n         * @description Chart unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         */\r\n        unit: '',\r\n        /**\r\n         * @description Show item value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\r\n        showValue: false\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      capsuleLength: [],\r\n      capsuleValue: [],\r\n      labelData: [],\r\n      labelDataLength: []\r\n    }\r\n  },\r\n  watch: {\r\n    config() {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    calcData() {\r\n      const { mergeConfig, calcCapsuleLengthAndLabelData } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcCapsuleLengthAndLabelData()\r\n    },\r\n    mergeConfig() {\r\n      let { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(\r\n        deepClone(defaultConfig, true),\r\n        config || {}\r\n      )\r\n    },\r\n    calcCapsuleLengthAndLabelData() {\r\n      const { data } = this.mergedConfig\r\n\r\n      if (!data.length) return\r\n\r\n      const capsuleValue = data.map(({ value }) => value)\r\n\r\n      const maxValue = Math.max(...capsuleValue)\r\n\r\n      this.capsuleValue = capsuleValue\r\n\r\n      this.capsuleLength = capsuleValue.map(v => (maxValue ? v / maxValue : 0))\r\n\r\n      const oneFifth = maxValue / 5\r\n\r\n      const labelData = Array.from(\r\n        new Set(new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth)))\r\n      )\r\n\r\n      this.labelData = labelData\r\n\r\n      this.labelDataLength = Array.from(labelData).map(v =>\r\n        maxValue ? v / maxValue : 0\r\n      )\r\n    }\r\n  },\r\n  mounted() {\r\n    const { calcData } = this\r\n\r\n    calcData()\r\n  }\r\n}\r\n",{"version":3,"sources":["main.vue"],"names":[],"mappings":";AAmCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/capsuleChart/src","sourcesContent":["<template>\r\n  <div class=\"dv-capsule-chart\">\r\n    <template v-if=\"mergedConfig\">\r\n      <div class=\"label-column\">\r\n        <div v-for=\"item in mergedConfig.data\" :key=\"item.name\">{{ item.name }}</div>\r\n        <div>&nbsp;</div>\r\n      </div>\r\n\r\n      <div class=\"capsule-container\">\r\n        <div class=\"capsule-item\" v-for=\"(capsule, index) in capsuleLength\" :key=\"index\">\r\n          <div\r\n            class=\"capsule-item-column\"\r\n            :style=\"`width: ${capsule * 100}%; background-color: ${mergedConfig.colors[index % mergedConfig.colors.length]};`\"\r\n          >\r\n            <div\r\n              v-if=\"mergedConfig.showValue\"\r\n              class=\"capsule-item-value\"\r\n            >{{ capsuleValue[index] }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"unit-label\">\r\n          <div\r\n            v-for=\"(label, index) in labelData\"\r\n            :key=\"label + index\"\r\n          >{{ label }}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"unit-text\" v-if=\"mergedConfig.unit\">{{ mergedConfig.unit }}</div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvCapsuleChart',\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultConfig: {\r\n        /**\r\n         * @description Capsule chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\r\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: [\r\n          '#37a2da',\r\n          '#32c5e9',\r\n          '#67e0e3',\r\n          '#9fe6b8',\r\n          '#ffdb5c',\r\n          '#ff9f7f',\r\n          '#fb7293'\r\n        ],\r\n        /**\r\n         * @description Chart unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         */\r\n        unit: '',\r\n        /**\r\n         * @description Show item value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\r\n        showValue: false\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      capsuleLength: [],\r\n      capsuleValue: [],\r\n      labelData: [],\r\n      labelDataLength: []\r\n    }\r\n  },\r\n  watch: {\r\n    config() {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    calcData() {\r\n      const { mergeConfig, calcCapsuleLengthAndLabelData } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcCapsuleLengthAndLabelData()\r\n    },\r\n    mergeConfig() {\r\n      let { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(\r\n        deepClone(defaultConfig, true),\r\n        config || {}\r\n      )\r\n    },\r\n    calcCapsuleLengthAndLabelData() {\r\n      const { data } = this.mergedConfig\r\n\r\n      if (!data.length) return\r\n\r\n      const capsuleValue = data.map(({ value }) => value)\r\n\r\n      const maxValue = Math.max(...capsuleValue)\r\n\r\n      this.capsuleValue = capsuleValue\r\n\r\n      this.capsuleLength = capsuleValue.map(v => (maxValue ? v / maxValue : 0))\r\n\r\n      const oneFifth = maxValue / 5\r\n\r\n      const labelData = Array.from(\r\n        new Set(new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth)))\r\n      )\r\n\r\n      this.labelData = labelData\r\n\r\n      this.labelDataLength = Array.from(labelData).map(v =>\r\n        maxValue ? v / maxValue : 0\r\n      )\r\n    }\r\n  },\r\n  mounted() {\r\n    const { calcData } = this\r\n\r\n    calcData()\r\n  }\r\n}\r\n</script>"]}]}