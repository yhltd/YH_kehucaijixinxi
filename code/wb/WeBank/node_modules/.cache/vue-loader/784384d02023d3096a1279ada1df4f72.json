{"remainingRequest":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue","mtime":1681782973652},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1681782976971},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1681783170949}],"contextDependencies":[],"result":["\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvPercentPond',\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      gradientId1: `percent-pond-gradientId1-${id}`,\r\n      gradientId2: `percent-pond-gradientId2-${id}`,\r\n\r\n      width: 0,\r\n      height: 0,\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Value\r\n         * @type {Number}\r\n         * @default value = 0\r\n         */\r\n        value: 0,\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default colors = ['#00BAFF', '#3DE7C9']\r\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: ['#3DE7C9', '#00BAFF'],\r\n        /**\r\n         * @description Border width\r\n         * @type {Number}\r\n         * @default borderWidth = 3\r\n         */\r\n        borderWidth: 3,\r\n        /**\r\n         * @description Gap between border and pond\r\n         * @type {Number}\r\n         * @default borderGap = 3\r\n         */\r\n        borderGap: 3,\r\n        /**\r\n         * @description Line dash\r\n         * @type {Array<Number>}\r\n         * @default lineDash = [5, 1]\r\n         */\r\n        lineDash: [5, 1],\r\n        /**\r\n         * @description Text color\r\n         * @type {String}\r\n         * @default textColor = '#fff'\r\n         */\r\n        textColor: '#fff',\r\n        /**\r\n         * @description Border radius\r\n         * @type {Number}\r\n         * @default borderRadius = 5\r\n         */\r\n        borderRadius: 5,\r\n        /**\r\n         * @description Local Gradient\r\n         * @type {Boolean}\r\n         * @default localGradient = false\r\n         * @example localGradient = false | true\r\n         */\r\n        localGradient: false,\r\n        /**\r\n         * @description Formatter\r\n         * @type {String}\r\n         * @default formatter = '{value}%'\r\n         */\r\n        formatter: '{value}%'\r\n      },\r\n\r\n      mergedConfig: null\r\n    }\r\n  },\r\n  computed: {\r\n    rectWidth () {\r\n      const { mergedConfig, width } = this\r\n\r\n      if (!mergedConfig) return 0\r\n\r\n      const { borderWidth } = mergedConfig\r\n\r\n      return width - borderWidth\r\n    },\r\n    rectHeight () {\r\n      const { mergedConfig, height } = this\r\n\r\n      if (!mergedConfig) return 0\r\n\r\n      const { borderWidth } = mergedConfig\r\n\r\n      return height - borderWidth\r\n    },\r\n    points () {\r\n      const { mergedConfig, width, height } = this\r\n\r\n      const halfHeight = height / 2\r\n\r\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\r\n\r\n      const { borderWidth, borderGap, value } = mergedConfig\r\n\r\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\r\n\r\n      return `\r\n        ${borderWidth + borderGap}, ${halfHeight}\r\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\r\n      `\r\n    },\r\n    polylineWidth () {\r\n      const { mergedConfig, height } = this\r\n\r\n      if (!mergedConfig) return 0\r\n\r\n      const { borderWidth, borderGap } = mergedConfig\r\n\r\n      return height - (borderWidth + borderGap) * 2\r\n    },\r\n    linearGradient () {\r\n      const { mergedConfig } = this\r\n\r\n      if (!mergedConfig) return []\r\n\r\n      const { colors } = mergedConfig\r\n\r\n      const colorNum = colors.length\r\n\r\n      const colorOffsetGap = 100 / (colorNum - 1)\r\n\r\n      return colors.map((c, i) => [colorOffsetGap * i, c])\r\n    },\r\n    polylineGradient () {\r\n      const { gradientId1, gradientId2, mergedConfig } = this\r\n\r\n      if (!mergedConfig) return gradientId2\r\n\r\n      if (mergedConfig.localGradient) return gradientId1\r\n\r\n      return gradientId2\r\n    },\r\n    gradient2XPos () {\r\n      const { mergedConfig } = this\r\n\r\n      if (!mergedConfig) return '100%'\r\n\r\n      const { value } = mergedConfig\r\n\r\n      return `${200 - value}%`\r\n    },\r\n    details () {\r\n      const { mergedConfig } = this\r\n\r\n      if (!mergedConfig) return ''\r\n\r\n      const { value, formatter } = mergedConfig\r\n\r\n      return formatter.replace('{value}', value)\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { mergeConfig } = this\r\n\r\n      mergeConfig()\r\n    }\r\n  },\r\n  methods: {\r\n    async init () {\r\n      const { initWH, config, mergeConfig } = this\r\n\r\n      await initWH()\r\n\r\n      if (!config) return\r\n\r\n      mergeConfig()\r\n    },\r\n    async initWH () {\r\n      const { $nextTick, $refs } = this\r\n\r\n      await $nextTick()\r\n\r\n      const { clientWidth, clientHeight } = $refs['percent-pond']\r\n\r\n      this.width = clientWidth\r\n      this.height = clientHeight\r\n    },\r\n    mergeConfig () {\r\n      const { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    }\r\n  },\r\n  mounted () {\r\n    const { init } = this\r\n\r\n    init()\r\n  }\r\n}\r\n",{"version":3,"sources":["main.vue"],"names":[],"mappings":";AA8CA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/percentPond/src","sourcesContent":["<template>\r\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\r\n    <svg>\r\n      <defs>\r\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\r\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\r\n            :offset=\"`${lc[0]}%`\"\r\n            :stop-color=\"lc[1]\" />\r\n        </linearGradient>\r\n\r\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\r\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\r\n            :offset=\"`${lc[0]}%`\"\r\n            :stop-color=\"lc[1]\" />\r\n        </linearGradient>\r\n      </defs>\r\n      <rect\r\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\r\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\r\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\r\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\r\n        fill=\"transparent\"\r\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\r\n        :stroke=\"`url(#${gradientId1})`\"\r\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\r\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\r\n      />\r\n      <polyline\r\n        :stroke-width=\"polylineWidth\"\r\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\r\n        :stroke=\"`url(#${polylineGradient})`\"\r\n        :points=\"points\"\r\n      />\r\n      <text\r\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\r\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\r\n        :x=\"width / 2\"\r\n        :y=\"height / 2\"\r\n      >\r\n        {{ details }}\r\n      </text>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvPercentPond',\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      gradientId1: `percent-pond-gradientId1-${id}`,\r\n      gradientId2: `percent-pond-gradientId2-${id}`,\r\n\r\n      width: 0,\r\n      height: 0,\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Value\r\n         * @type {Number}\r\n         * @default value = 0\r\n         */\r\n        value: 0,\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default colors = ['#00BAFF', '#3DE7C9']\r\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: ['#3DE7C9', '#00BAFF'],\r\n        /**\r\n         * @description Border width\r\n         * @type {Number}\r\n         * @default borderWidth = 3\r\n         */\r\n        borderWidth: 3,\r\n        /**\r\n         * @description Gap between border and pond\r\n         * @type {Number}\r\n         * @default borderGap = 3\r\n         */\r\n        borderGap: 3,\r\n        /**\r\n         * @description Line dash\r\n         * @type {Array<Number>}\r\n         * @default lineDash = [5, 1]\r\n         */\r\n        lineDash: [5, 1],\r\n        /**\r\n         * @description Text color\r\n         * @type {String}\r\n         * @default textColor = '#fff'\r\n         */\r\n        textColor: '#fff',\r\n        /**\r\n         * @description Border radius\r\n         * @type {Number}\r\n         * @default borderRadius = 5\r\n         */\r\n        borderRadius: 5,\r\n        /**\r\n         * @description Local Gradient\r\n         * @type {Boolean}\r\n         * @default localGradient = false\r\n         * @example localGradient = false | true\r\n         */\r\n        localGradient: false,\r\n        /**\r\n         * @description Formatter\r\n         * @type {String}\r\n         * @default formatter = '{value}%'\r\n         */\r\n        formatter: '{value}%'\r\n      },\r\n\r\n      mergedConfig: null\r\n    }\r\n  },\r\n  computed: {\r\n    rectWidth () {\r\n      const { mergedConfig, width } = this\r\n\r\n      if (!mergedConfig) return 0\r\n\r\n      const { borderWidth } = mergedConfig\r\n\r\n      return width - borderWidth\r\n    },\r\n    rectHeight () {\r\n      const { mergedConfig, height } = this\r\n\r\n      if (!mergedConfig) return 0\r\n\r\n      const { borderWidth } = mergedConfig\r\n\r\n      return height - borderWidth\r\n    },\r\n    points () {\r\n      const { mergedConfig, width, height } = this\r\n\r\n      const halfHeight = height / 2\r\n\r\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\r\n\r\n      const { borderWidth, borderGap, value } = mergedConfig\r\n\r\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\r\n\r\n      return `\r\n        ${borderWidth + borderGap}, ${halfHeight}\r\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\r\n      `\r\n    },\r\n    polylineWidth () {\r\n      const { mergedConfig, height } = this\r\n\r\n      if (!mergedConfig) return 0\r\n\r\n      const { borderWidth, borderGap } = mergedConfig\r\n\r\n      return height - (borderWidth + borderGap) * 2\r\n    },\r\n    linearGradient () {\r\n      const { mergedConfig } = this\r\n\r\n      if (!mergedConfig) return []\r\n\r\n      const { colors } = mergedConfig\r\n\r\n      const colorNum = colors.length\r\n\r\n      const colorOffsetGap = 100 / (colorNum - 1)\r\n\r\n      return colors.map((c, i) => [colorOffsetGap * i, c])\r\n    },\r\n    polylineGradient () {\r\n      const { gradientId1, gradientId2, mergedConfig } = this\r\n\r\n      if (!mergedConfig) return gradientId2\r\n\r\n      if (mergedConfig.localGradient) return gradientId1\r\n\r\n      return gradientId2\r\n    },\r\n    gradient2XPos () {\r\n      const { mergedConfig } = this\r\n\r\n      if (!mergedConfig) return '100%'\r\n\r\n      const { value } = mergedConfig\r\n\r\n      return `${200 - value}%`\r\n    },\r\n    details () {\r\n      const { mergedConfig } = this\r\n\r\n      if (!mergedConfig) return ''\r\n\r\n      const { value, formatter } = mergedConfig\r\n\r\n      return formatter.replace('{value}', value)\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { mergeConfig } = this\r\n\r\n      mergeConfig()\r\n    }\r\n  },\r\n  methods: {\r\n    async init () {\r\n      const { initWH, config, mergeConfig } = this\r\n\r\n      await initWH()\r\n\r\n      if (!config) return\r\n\r\n      mergeConfig()\r\n    },\r\n    async initWH () {\r\n      const { $nextTick, $refs } = this\r\n\r\n      await $nextTick()\r\n\r\n      const { clientWidth, clientHeight } = $refs['percent-pond']\r\n\r\n      this.width = clientWidth\r\n      this.height = clientHeight\r\n    },\r\n    mergeConfig () {\r\n      const { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    }\r\n  },\r\n  mounted () {\r\n    const { init } = this\r\n\r\n    init()\r\n  }\r\n}\r\n</script>"]}]}