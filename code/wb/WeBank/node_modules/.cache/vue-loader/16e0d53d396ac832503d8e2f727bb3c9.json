{"remainingRequest":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration1\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration1\\src\\main.vue","mtime":1681782973588},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1681782976971},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1681783170949}],"contextDependencies":[],"result":["\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvDecoration1',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    }\r\n  },\r\n  data () {\r\n    const pointSideLength = 2.5\r\n\r\n    return {\r\n      ref: 'decoration-1',\r\n\r\n      svgWH: [200, 50],\r\n\r\n      svgScale: [1, 1],\r\n\r\n      rowNum: 4,\r\n      rowPoints: 20,\r\n\r\n      pointSideLength,\r\n      halfPointSideLength: pointSideLength / 2,\r\n\r\n      points: [],\r\n\r\n      rects: [],\r\n\r\n      defaultColor: ['#fff', '#0de7c2'],\r\n\r\n      mergedColor: []\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    calcSVGData () {\r\n      const { calcPointsPosition, calcRectsPosition, calcScale } = this\r\n\r\n      calcPointsPosition()\r\n\r\n      calcRectsPosition()\r\n\r\n      calcScale()\r\n    },\r\n    calcPointsPosition () {\r\n      const { svgWH, rowNum, rowPoints } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      const horizontalGap = w / (rowPoints + 1)\r\n      const verticalGap = h / (rowNum + 1)\r\n\r\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\r\n        new Array(rowPoints).fill(0).map((foo, j) => [\r\n          horizontalGap * (j + 1), verticalGap * (i + 1)\r\n        ]))\r\n\r\n      this.points = points.reduce((all, item) => [...all, ...item], [])\r\n    },\r\n    calcRectsPosition () {\r\n      const { points, rowPoints } = this\r\n\r\n      const rect1 = points[rowPoints * 2 - 1]\r\n      const rect2 = points[rowPoints * 2 - 3]\r\n\r\n      this.rects = [rect1, rect2]\r\n    },\r\n    calcScale () {\r\n      const { width, height, svgWH } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      this.svgScale = [width / w, height / h]\r\n    },\r\n    onResize () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    }\r\n  },\r\n  mounted () {\r\n    const { mergeColor } = this\r\n\r\n    mergeColor()\r\n  }\r\n}\r\n",{"version":3,"sources":["main.vue"],"names":[],"mappings":";AAuFA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration1/src","sourcesContent":["<template>\r\n  <div class=\"dv-decoration-1\" :ref=\"ref\">\r\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\r\n\r\n      <template\r\n        v-for=\"(point, i) in points\"\r\n      >\r\n        <rect\r\n          v-if=\"Math.random() > 0.6\"\r\n          :key=\"i\"\r\n          :fill=\"mergedColor[0]\"\r\n          :x=\"point[0] - halfPointSideLength\"\r\n          :y=\"point[1] - halfPointSideLength\"\r\n          :width=\"pointSideLength\"\r\n          :height=\"pointSideLength\"\r\n        >\r\n          <animate\r\n            v-if=\"Math.random() > 0.6\"\r\n            attributeName=\"fill\"\r\n            :values=\"`${mergedColor[0]};transparent`\"\r\n            dur=\"1s\"\r\n            :begin=\"Math.random() * 2\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </rect>\r\n      </template>\r\n\r\n      <rect\r\n        v-if=\"rects[0]\"\r\n        :fill=\"mergedColor[1]\"\r\n        :x=\"rects[0][0] - pointSideLength\"\r\n        :y=\"rects[0][1] - pointSideLength\"\r\n        :width=\"pointSideLength * 2\"\r\n        :height=\"pointSideLength * 2\"\r\n      >\r\n        <animate\r\n          attributeName=\"width\"\r\n          :values=\"`0;${pointSideLength * 2}`\"\r\n          dur=\"2s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"height\"\r\n          :values=\"`0;${pointSideLength * 2}`\"\r\n          dur=\"2s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          :values=\"`${rects[0][0]};${rects[0][0] - pointSideLength}`\"\r\n          dur=\"2s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          :values=\"`${rects[0][1]};${rects[0][1] - pointSideLength}`\"\r\n          dur=\"2s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n\r\n      <rect\r\n        v-if=\"rects[1]\"\r\n        :fill=\"mergedColor[1]\"\r\n        :x=\"rects[1][0] - 40\"\r\n        :y=\"rects[1][1] - pointSideLength\"\r\n        :width=\"40\"\r\n        :height=\"pointSideLength * 2\"\r\n      >\r\n        <animate\r\n          attributeName=\"width\"\r\n          values=\"0;40;0\"\r\n          dur=\"2s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          :values=\"`${rects[1][0]};${rects[1][0] - 40};${rects[1][0]}`\"\r\n          dur=\"2s\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvDecoration1',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    }\r\n  },\r\n  data () {\r\n    const pointSideLength = 2.5\r\n\r\n    return {\r\n      ref: 'decoration-1',\r\n\r\n      svgWH: [200, 50],\r\n\r\n      svgScale: [1, 1],\r\n\r\n      rowNum: 4,\r\n      rowPoints: 20,\r\n\r\n      pointSideLength,\r\n      halfPointSideLength: pointSideLength / 2,\r\n\r\n      points: [],\r\n\r\n      rects: [],\r\n\r\n      defaultColor: ['#fff', '#0de7c2'],\r\n\r\n      mergedColor: []\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    calcSVGData () {\r\n      const { calcPointsPosition, calcRectsPosition, calcScale } = this\r\n\r\n      calcPointsPosition()\r\n\r\n      calcRectsPosition()\r\n\r\n      calcScale()\r\n    },\r\n    calcPointsPosition () {\r\n      const { svgWH, rowNum, rowPoints } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      const horizontalGap = w / (rowPoints + 1)\r\n      const verticalGap = h / (rowNum + 1)\r\n\r\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\r\n        new Array(rowPoints).fill(0).map((foo, j) => [\r\n          horizontalGap * (j + 1), verticalGap * (i + 1)\r\n        ]))\r\n\r\n      this.points = points.reduce((all, item) => [...all, ...item], [])\r\n    },\r\n    calcRectsPosition () {\r\n      const { points, rowPoints } = this\r\n\r\n      const rect1 = points[rowPoints * 2 - 1]\r\n      const rect2 = points[rowPoints * 2 - 3]\r\n\r\n      this.rects = [rect1, rect2]\r\n    },\r\n    calcScale () {\r\n      const { width, height, svgWH } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      this.svgScale = [width / w, height / h]\r\n    },\r\n    onResize () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    }\r\n  },\r\n  mounted () {\r\n    const { mergeColor } = this\r\n\r\n    mergeColor()\r\n  }\r\n}\r\n</script>"]}]}