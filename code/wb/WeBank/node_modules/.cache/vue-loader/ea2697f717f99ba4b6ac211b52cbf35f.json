{"remainingRequest":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration12\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration12\\src\\main.vue","mtime":1681782973600},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1681782976971},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1681783170949}],"contextDependencies":[],"result":["\r\nimport autoResize from '../../../mixin/autoResize'\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport { fade } from '@jiaminghi/color'\r\n\r\nexport default {\r\n  name: 'DvDecoration12',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    /**\r\n     * @description Scan animation dur\r\n     */\r\n    scanDur: {\r\n      type: Number,\r\n      default: 3\r\n    },\r\n    /**\r\n     * @description Halo animation dur\r\n     */\r\n    haloDur: {\r\n      type: Number,\r\n      default: 2\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      ref: 'decoration-12',\r\n      gId: `decoration-12-g-${id}`,\r\n      gradientId: `decoration-12-gradient-${id}`,\r\n\r\n      defaultColor: ['#2783ce', '#2cf7fe'],\r\n\r\n      mergedColor: [],\r\n\r\n      pathD: [],\r\n\r\n      pathColor: [],\r\n\r\n      circleR: [],\r\n\r\n      splitLinePoints: [],\r\n\r\n      arcD: [],\r\n\r\n      segment: 30,\r\n\r\n      sectorAngle: Math.PI / 3,\r\n\r\n      ringNum: 3,\r\n\r\n      ringWidth: 1,\r\n\r\n      showSplitLine: true\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  computed: {\r\n    x () {\r\n      const { width } = this\r\n\r\n      return width / 2\r\n    },\r\n    y () {\r\n      const { height } = this\r\n\r\n      return height / 2\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      const { mergeColor, calcPathD, calcPathColor, calcCircleR, calcSplitLinePoints, calcArcD } = this\r\n\r\n      mergeColor()\r\n\r\n      calcPathD()\r\n\r\n      calcPathColor()\r\n\r\n      calcCircleR()\r\n\r\n      calcSplitLinePoints()\r\n\r\n      calcArcD()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    },\r\n    calcPathD () {\r\n      const { x, y, width, segment, sectorAngle } = this\r\n\r\n      const startAngle = -Math.PI / 2\r\n      const angleGap = sectorAngle / segment\r\n      const r = width / 4\r\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle)\r\n\r\n      this.pathD = new Array(segment)\r\n        .fill('')\r\n        .map((_, i) => {\r\n          const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5))\r\n          const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`\r\n          lastEndPoints = endPoints\r\n\r\n          return d\r\n        })\r\n    },\r\n    calcPathColor () {\r\n      const { mergedColor: [color], segment } = this\r\n\r\n      const colorGap = 100 / (segment - 1)\r\n\r\n      this.pathColor = new Array(segment)\r\n        .fill(color)\r\n        .map((_, i) => fade(color, 100 - i * colorGap))\r\n    },\r\n    calcCircleR () {\r\n      const { segment, ringNum, width, ringWidth } = this\r\n\r\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum\r\n\r\n      this.circleR = new Array(ringNum)\r\n        .fill(0)\r\n        .map((_, i) => radiusGap * (i + 1))\r\n    },\r\n    calcSplitLinePoints () {\r\n      const { x, y, width } = this\r\n\r\n      const angleGap = Math.PI / 6\r\n      const r = width / 2\r\n\r\n      this.splitLinePoints = new Array(6)\r\n        .fill('')\r\n        .map((_, i) => {\r\n          const startAngle = angleGap * (i + 1)\r\n          const endAngle = startAngle + Math.PI\r\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\r\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\r\n\r\n          return `${startPoint.join(',')} ${endPoint.join(',')}`\r\n        })\r\n    },\r\n    calcArcD () {\r\n      const { x, y, width } = this\r\n\r\n      const angleGap = Math.PI / 6\r\n      const r = width / 2 - 1\r\n\r\n      this.arcD = new Array(4)\r\n        .fill('')\r\n        .map((_, i) => {\r\n          const startAngle = angleGap * (3 * i + 1)\r\n          const endAngle = startAngle + angleGap\r\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\r\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\r\n\r\n          return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`\r\n        })\r\n    },\r\n    afterAutoResizeMixinInit () {\r\n      const { init } = this\r\n\r\n      init()\r\n    },\r\n    fade\r\n  }\r\n}\r\n",{"version":3,"sources":["main.vue"],"names":[],"mappings":";AAqfile":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration12/src","sourcesContent":["<template>\r\n  <div class=\"dv-decoration-12\" :ref=\"ref\">\r\n    <svg :width=\"width\" :height=\"height\">\r\n      <defs>\r\n        <g :id=\"gId\">\r\n          <path\r\n            :stroke=\"pathColor[i]\"\r\n            :stroke-width=\"width / 2\"\r\n            fill=\"transparent\"\r\n            v-for=\"(d, i) in pathD\"\r\n            :key=\"d\"\r\n            :d=\"d\"\r\n          />\r\n        </g>\r\n\r\n        <radialGradient\r\n          :id=\"gradientId\"\r\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\r\n        >\r\n          <stop offset=\"0%\" stop-color=\"transparent\" stop-opacity=\"1\" />\r\n          <stop offset=\"100%\" :stop-color=\"fade(mergedColor[1] || defaultColor[1], 30)\" stop-opacity=\"1\" />\r\n        </radialGradient>\r\n      </defs>\r\n\r\n      <circle\r\n        v-for=\"r in circleR\"\r\n        :key=\"r\"\r\n        :r=\"r\"\r\n        :cx=\"x\"\r\n        :cy=\"y\"\r\n        :stroke=\"mergedColor[1]\"\r\n        :stroke-width=\"0.5\"\r\n        fill=\"transparent\"\r\n      />\r\n\r\n      <circle\r\n        r=\"1\"\r\n        :cx=\"x\"\r\n        :cy=\"y\"\r\n        stroke=\"transparent\"\r\n        :fill=\"`url(#${gradientId})`\"\r\n      >\r\n        <animate\r\n          attributeName=\"r\"\r\n          :values=\"`1;${width / 2}`\"\r\n          :dur=\"`${haloDur}s`\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          values=\"1;0\"\r\n          :dur=\"`${haloDur}s`\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </circle>\r\n\r\n      <circle\r\n        r=\"2\"\r\n        :cx=\"x\"\r\n        :cy=\"y\"\r\n        :fill=\"mergedColor[1]\"\r\n      />\r\n\r\n      <g v-if=\"showSplitLine\">\r\n        <polyline\r\n          v-for=\"p in splitLinePoints\"\r\n          :key=\"p\"\r\n          :points=\"p\"\r\n          :stroke=\"mergedColor[1]\"\r\n          :stroke-width=\"0.5\"\r\n          opacity=\"0.5\"\r\n        />\r\n      </g>\r\n\r\n      <path\r\n        v-for=\"d in arcD\"\r\n        :key=\"d\"\r\n        :d=\"d\"\r\n        :stroke=\"mergedColor[1]\"\r\n        stroke-width=\"2\"\r\n        fill=\"transparent\"\r\n      />\r\n\r\n      <use :xlink:href=\"`#${gId}`\">\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          type=\"rotate\"\r\n          :values=\"`0, ${x} ${y};360, ${x} ${y}`\"\r\n          :dur=\"`${scanDur}s`\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </use>\r\n    </svg>\r\n\r\n    <div class=\"decoration-content\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone, getCircleRadianPoint } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport { fade } from '@jiaminghi/color'\r\n\r\nexport default {\r\n  name: 'DvDecoration12',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    /**\r\n     * @description Scan animation dur\r\n     */\r\n    scanDur: {\r\n      type: Number,\r\n      default: 3\r\n    },\r\n    /**\r\n     * @description Halo animation dur\r\n     */\r\n    haloDur: {\r\n      type: Number,\r\n      default: 2\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      ref: 'decoration-12',\r\n      gId: `decoration-12-g-${id}`,\r\n      gradientId: `decoration-12-gradient-${id}`,\r\n\r\n      defaultColor: ['#2783ce', '#2cf7fe'],\r\n\r\n      mergedColor: [],\r\n\r\n      pathD: [],\r\n\r\n      pathColor: [],\r\n\r\n      circleR: [],\r\n\r\n      splitLinePoints: [],\r\n\r\n      arcD: [],\r\n\r\n      segment: 30,\r\n\r\n      sectorAngle: Math.PI / 3,\r\n\r\n      ringNum: 3,\r\n\r\n      ringWidth: 1,\r\n\r\n      showSplitLine: true\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  computed: {\r\n    x () {\r\n      const { width } = this\r\n\r\n      return width / 2\r\n    },\r\n    y () {\r\n      const { height } = this\r\n\r\n      return height / 2\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      const { mergeColor, calcPathD, calcPathColor, calcCircleR, calcSplitLinePoints, calcArcD } = this\r\n\r\n      mergeColor()\r\n\r\n      calcPathD()\r\n\r\n      calcPathColor()\r\n\r\n      calcCircleR()\r\n\r\n      calcSplitLinePoints()\r\n\r\n      calcArcD()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    },\r\n    calcPathD () {\r\n      const { x, y, width, segment, sectorAngle } = this\r\n\r\n      const startAngle = -Math.PI / 2\r\n      const angleGap = sectorAngle / segment\r\n      const r = width / 4\r\n      let lastEndPoints = getCircleRadianPoint(x, y, r, startAngle)\r\n\r\n      this.pathD = new Array(segment)\r\n        .fill('')\r\n        .map((_, i) => {\r\n          const endPoints = getCircleRadianPoint(x, y, r, startAngle - (i + 1) * angleGap).map(_ => _.toFixed(5))\r\n          const d = `M${lastEndPoints.join(',')} A${r}, ${r} 0 0 0 ${endPoints.join(',')}`\r\n          lastEndPoints = endPoints\r\n\r\n          return d\r\n        })\r\n    },\r\n    calcPathColor () {\r\n      const { mergedColor: [color], segment } = this\r\n\r\n      const colorGap = 100 / (segment - 1)\r\n\r\n      this.pathColor = new Array(segment)\r\n        .fill(color)\r\n        .map((_, i) => fade(color, 100 - i * colorGap))\r\n    },\r\n    calcCircleR () {\r\n      const { segment, ringNum, width, ringWidth } = this\r\n\r\n      const radiusGap = (width / 2 - ringWidth / 2) / ringNum\r\n\r\n      this.circleR = new Array(ringNum)\r\n        .fill(0)\r\n        .map((_, i) => radiusGap * (i + 1))\r\n    },\r\n    calcSplitLinePoints () {\r\n      const { x, y, width } = this\r\n\r\n      const angleGap = Math.PI / 6\r\n      const r = width / 2\r\n\r\n      this.splitLinePoints = new Array(6)\r\n        .fill('')\r\n        .map((_, i) => {\r\n          const startAngle = angleGap * (i + 1)\r\n          const endAngle = startAngle + Math.PI\r\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\r\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\r\n\r\n          return `${startPoint.join(',')} ${endPoint.join(',')}`\r\n        })\r\n    },\r\n    calcArcD () {\r\n      const { x, y, width } = this\r\n\r\n      const angleGap = Math.PI / 6\r\n      const r = width / 2 - 1\r\n\r\n      this.arcD = new Array(4)\r\n        .fill('')\r\n        .map((_, i) => {\r\n          const startAngle = angleGap * (3 * i + 1)\r\n          const endAngle = startAngle + angleGap\r\n          const startPoint = getCircleRadianPoint(x, y, r, startAngle)\r\n          const endPoint = getCircleRadianPoint(x, y, r, endAngle)\r\n\r\n          return `M${startPoint.join(',')} A${x}, ${y} 0 0 1 ${endPoint.join(',')}`\r\n        })\r\n    },\r\n    afterAutoResizeMixinInit () {\r\n      const { init } = this\r\n\r\n      init()\r\n    },\r\n    fade\r\n  }\r\n}\r\n</script>"]}]}