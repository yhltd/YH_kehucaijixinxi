{"remainingRequest":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\@jiaminghi\\data-view\\lib\\components\\conicalColumnChart\\src\\main.vue","mtime":1681782973585},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\babel-loader\\lib\\index.js","mtime":1681782976971},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681782977946},{"path":"E:\\工作(林)\\YH_kehucaijixinxi\\code\\wb\\WeBank\\node_modules\\vue-loader\\lib\\index.js","mtime":1681783170949}],"contextDependencies":[],"result":["\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvConicalColumnChart',\r\n  mixins: [autoResize],\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      ref: 'conical-column-chart',\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Chart img\r\n         * @type {Array<String>}\r\n         * @default img = []\r\n         */\r\n        img: [],\r\n        /**\r\n         * @description Chart font size\r\n         * @type {Number}\r\n         * @default fontSize = 12\r\n         */\r\n        fontSize: 12,\r\n        /**\r\n         * @description Img side length\r\n         * @type {Number}\r\n         * @default imgSideLength = 30\r\n         */\r\n        imgSideLength: 30,\r\n        /**\r\n         * @description Column color\r\n         * @type {String}\r\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\r\n         */\r\n        columnColor: 'rgba(0, 194, 255, 0.4)',\r\n        /**\r\n         * @description Text color\r\n         * @type {String}\r\n         * @default textColor = '#fff'\r\n         */\r\n        textColor: '#fff',\r\n        /**\r\n         * @description Show value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\r\n        showValue: false\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      column: []\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    onResize () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, initData, calcSVGPath } = this\r\n\r\n      mergeConfig()\r\n\r\n      initData()\r\n\r\n      calcSVGPath()\r\n    },\r\n    mergeConfig () {\r\n      const { defaultConfig, config } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    },\r\n    initData () {\r\n      const { mergedConfig } = this\r\n      let { data } = mergedConfig\r\n\r\n      data = deepClone(data, true)\r\n\r\n      data.sort(({ value: a }, { value: b }) => {\r\n        if (a > b) return -1\r\n        if (a < b) return 1\r\n        if (a === b) return 0\r\n      })\r\n\r\n      const max = data[0] ? data[0].value : 10\r\n\r\n      data = data.map(item => ({\r\n        ...item,\r\n        percent: item.value / max\r\n      }))\r\n\r\n      mergedConfig.data = data\r\n    },\r\n    calcSVGPath () {\r\n      const { mergedConfig, width, height } = this\r\n\r\n      const { imgSideLength, fontSize, data } = mergedConfig\r\n\r\n      const itemNum = data.length\r\n      const gap = width / (itemNum + 1)\r\n\r\n      const useAbleHeight = height - imgSideLength - fontSize - 5\r\n      const svgBottom = height - fontSize - 5\r\n\r\n      this.column = data.map((item, i) => {\r\n        const { percent } = item\r\n\r\n        const middleXPos = gap * (i + 1)\r\n        const leftXPos = gap * i\r\n        const rightXpos = gap * (i + 2)\r\n\r\n        const middleYPos = svgBottom - useAbleHeight * percent\r\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos\r\n\r\n        const d = `\r\n          M${leftXPos}, ${svgBottom}\r\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\r\n          M${middleXPos},${middleYPos}\r\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\r\n          L${leftXPos}, ${svgBottom}\r\n          Z\r\n        `\r\n\r\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2\r\n\r\n        return {\r\n          ...item,\r\n          d,\r\n          x: middleXPos,\r\n          y: middleYPos,\r\n          textY\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["main.vue"],"names":[],"mappings":";AA0CA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/conicalColumnChart/src","sourcesContent":["<template>\r\n  <div class=\"dv-conical-column-chart\" :ref=\"ref\">\r\n    <svg :width=\"width\" :height=\"height\">\r\n      <g\r\n        v-for=\"(item, i) in column\"\r\n        :key=\"i\"\r\n      >\r\n        <path\r\n          :d=\"item.d\"\r\n          :fill=\"mergedConfig.columnColor\"\r\n        />\r\n        <text\r\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\r\n          :fill=\"mergedConfig.textColor\"\r\n          :x=\"item.x\"\r\n          :y=\"height - 4\"\r\n        >\r\n          {{ item.name }}\r\n        </text>\r\n        <image\r\n          v-if=\"mergedConfig.img.length\"\r\n          :xlink:href=\"mergedConfig.img[i % mergedConfig.img.length]\"\r\n          :width=\"mergedConfig.imgSideLength\"\r\n          :height=\"mergedConfig.imgSideLength\"\r\n          :x=\"item.x - mergedConfig.imgSideLength / 2\"\r\n          :y=\"item.y - mergedConfig.imgSideLength\"\r\n        />\r\n        <text\r\n          v-if=\"mergedConfig.showValue\"\r\n          :style=\"`fontSize:${mergedConfig.fontSize}px`\"\r\n          :fill=\"mergedConfig.textColor\"\r\n          :x=\"item.x\"\r\n          :y=\"item.textY\"\r\n        >\r\n          {{ item.value }}\r\n        </text>\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvConicalColumnChart',\r\n  mixins: [autoResize],\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      ref: 'conical-column-chart',\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Chart img\r\n         * @type {Array<String>}\r\n         * @default img = []\r\n         */\r\n        img: [],\r\n        /**\r\n         * @description Chart font size\r\n         * @type {Number}\r\n         * @default fontSize = 12\r\n         */\r\n        fontSize: 12,\r\n        /**\r\n         * @description Img side length\r\n         * @type {Number}\r\n         * @default imgSideLength = 30\r\n         */\r\n        imgSideLength: 30,\r\n        /**\r\n         * @description Column color\r\n         * @type {String}\r\n         * @default columnColor = 'rgba(0, 194, 255, 0.4)'\r\n         */\r\n        columnColor: 'rgba(0, 194, 255, 0.4)',\r\n        /**\r\n         * @description Text color\r\n         * @type {String}\r\n         * @default textColor = '#fff'\r\n         */\r\n        textColor: '#fff',\r\n        /**\r\n         * @description Show value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\r\n        showValue: false\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      column: []\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    onResize () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, initData, calcSVGPath } = this\r\n\r\n      mergeConfig()\r\n\r\n      initData()\r\n\r\n      calcSVGPath()\r\n    },\r\n    mergeConfig () {\r\n      const { defaultConfig, config } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    },\r\n    initData () {\r\n      const { mergedConfig } = this\r\n      let { data } = mergedConfig\r\n\r\n      data = deepClone(data, true)\r\n\r\n      data.sort(({ value: a }, { value: b }) => {\r\n        if (a > b) return -1\r\n        if (a < b) return 1\r\n        if (a === b) return 0\r\n      })\r\n\r\n      const max = data[0] ? data[0].value : 10\r\n\r\n      data = data.map(item => ({\r\n        ...item,\r\n        percent: item.value / max\r\n      }))\r\n\r\n      mergedConfig.data = data\r\n    },\r\n    calcSVGPath () {\r\n      const { mergedConfig, width, height } = this\r\n\r\n      const { imgSideLength, fontSize, data } = mergedConfig\r\n\r\n      const itemNum = data.length\r\n      const gap = width / (itemNum + 1)\r\n\r\n      const useAbleHeight = height - imgSideLength - fontSize - 5\r\n      const svgBottom = height - fontSize - 5\r\n\r\n      this.column = data.map((item, i) => {\r\n        const { percent } = item\r\n\r\n        const middleXPos = gap * (i + 1)\r\n        const leftXPos = gap * i\r\n        const rightXpos = gap * (i + 2)\r\n\r\n        const middleYPos = svgBottom - useAbleHeight * percent\r\n        const controlYPos = useAbleHeight * percent * 0.6 + middleYPos\r\n\r\n        const d = `\r\n          M${leftXPos}, ${svgBottom}\r\n          Q${middleXPos}, ${controlYPos} ${middleXPos},${middleYPos}\r\n          M${middleXPos},${middleYPos}\r\n          Q${middleXPos}, ${controlYPos} ${rightXpos},${svgBottom}\r\n          L${leftXPos}, ${svgBottom}\r\n          Z\r\n        `\r\n\r\n        const textY = (svgBottom + middleYPos) / 2 + fontSize / 2\r\n\r\n        return {\r\n          ...item,\r\n          d,\r\n          x: middleXPos,\r\n          y: middleYPos,\r\n          textY\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>"]}]}